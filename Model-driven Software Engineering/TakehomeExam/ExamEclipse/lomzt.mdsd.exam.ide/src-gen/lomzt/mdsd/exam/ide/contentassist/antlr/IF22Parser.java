/*
 * generated by Xtext 2.26.0
 */
package lomzt.mdsd.exam.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import lomzt.mdsd.exam.ide.contentassist.antlr.internal.InternalIF22Parser;
import lomzt.mdsd.exam.services.IF22GrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class IF22Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(IF22GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, IF22GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getLocationAccess().getAlternatives(), "rule__Location__Alternatives");
			builder.put(grammarAccess.getTargetableAccess().getAlternatives(), "rule__Targetable__Alternatives");
			builder.put(grammarAccess.getExpAccess().getAlternatives_1_0(), "rule__Exp__Alternatives_1_0");
			builder.put(grammarAccess.getEqualsOrNotEqualsAccess().getAlternatives_1_0(), "rule__EqualsOrNotEquals__Alternatives_1_0");
			builder.put(grammarAccess.getCompareAccess().getAlternatives_1_0(), "rule__Compare__Alternatives_1_0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getAlternatives_1_0(), "rule__AdditionSubtraction__Alternatives_1_0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getAlternatives_1_0(), "rule__MultiplicationDivision__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getBindingAccess().getAlternatives(), "rule__Binding__Alternatives");
			builder.put(grammarAccess.getStoryAccess().getGroup(), "rule__Story__Group__0");
			builder.put(grammarAccess.getExternalImportAccess().getGroup(), "rule__ExternalImport__Group__0");
			builder.put(grammarAccess.getExternalImportAccess().getGroup_4(), "rule__ExternalImport__Group_4__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
			builder.put(grammarAccess.getTypeAccess().getGroup_2(), "rule__Type__Group_2__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_2(), "rule__Scenario__Group_2__0");
			builder.put(grammarAccess.getScenarioAccess().getGroup_2_2(), "rule__Scenario__Group_2_2__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getAnnounceAccess().getGroup(), "rule__Announce__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
			builder.put(grammarAccess.getQuestionAccess().getGroup_5(), "rule__Question__Group_5__0");
			builder.put(grammarAccess.getEndAccess().getGroup(), "rule__End__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup(), "rule__Target__Group__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_2(), "rule__Target__Group_2__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_2_1(), "rule__Target__Group_2_1__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_2_1_1(), "rule__Target__Group_2_1_1__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_3(), "rule__Target__Group_3__0");
			builder.put(grammarAccess.getTargetAccess().getGroup_4(), "rule__Target__Group_4__0");
			builder.put(grammarAccess.getEndingTargetAccess().getGroup(), "rule__EndingTarget__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup(), "rule__Exp__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1(), "rule__Exp__Group_1__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_0(), "rule__Exp__Group_1_0_0__0");
			builder.put(grammarAccess.getExpAccess().getGroup_1_0_1(), "rule__Exp__Group_1_0_1__0");
			builder.put(grammarAccess.getEqualsOrNotEqualsAccess().getGroup(), "rule__EqualsOrNotEquals__Group__0");
			builder.put(grammarAccess.getEqualsOrNotEqualsAccess().getGroup_1(), "rule__EqualsOrNotEquals__Group_1__0");
			builder.put(grammarAccess.getEqualsOrNotEqualsAccess().getGroup_1_0_0(), "rule__EqualsOrNotEquals__Group_1_0_0__0");
			builder.put(grammarAccess.getEqualsOrNotEqualsAccess().getGroup_1_0_1(), "rule__EqualsOrNotEquals__Group_1_0_1__0");
			builder.put(grammarAccess.getCompareAccess().getGroup(), "rule__Compare__Group__0");
			builder.put(grammarAccess.getCompareAccess().getGroup_1(), "rule__Compare__Group_1__0");
			builder.put(grammarAccess.getCompareAccess().getGroup_1_0_0(), "rule__Compare__Group_1_0_0__0");
			builder.put(grammarAccess.getCompareAccess().getGroup_1_0_1(), "rule__Compare__Group_1_0_1__0");
			builder.put(grammarAccess.getCompareAccess().getGroup_1_0_2(), "rule__Compare__Group_1_0_2__0");
			builder.put(grammarAccess.getCompareAccess().getGroup_1_0_3(), "rule__Compare__Group_1_0_3__0");
			builder.put(grammarAccess.getConcatonationAccess().getGroup(), "rule__Concatonation__Group__0");
			builder.put(grammarAccess.getConcatonationAccess().getGroup_1(), "rule__Concatonation__Group_1__0");
			builder.put(grammarAccess.getConcatonationAccess().getGroup_1_0(), "rule__Concatonation__Group_1_0__0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getGroup(), "rule__AdditionSubtraction__Group__0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getGroup_1(), "rule__AdditionSubtraction__Group_1__0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getGroup_1_0_0(), "rule__AdditionSubtraction__Group_1_0_0__0");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getGroup_1_0_1(), "rule__AdditionSubtraction__Group_1_0_1__0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getGroup(), "rule__MultiplicationDivision__Group__0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getGroup_1(), "rule__MultiplicationDivision__Group_1__0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getGroup_1_0_0(), "rule__MultiplicationDivision__Group_1_0_0__0");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getGroup_1_0_1(), "rule__MultiplicationDivision__Group_1_0_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_2(), "rule__Primary__Group_2__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_3(), "rule__Primary__Group_3__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_4(), "rule__Primary__Group_4__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_5(), "rule__Primary__Group_5__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_6(), "rule__Primary__Group_6__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_7(), "rule__Primary__Group_7__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_8(), "rule__Primary__Group_8__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_8_4(), "rule__Primary__Group_8_4__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_9(), "rule__Primary__Group_9__0");
			builder.put(grammarAccess.getVarBindingAccess().getGroup(), "rule__VarBinding__Group__0");
			builder.put(grammarAccess.getStoryAccess().getNameAssignment_1(), "rule__Story__NameAssignment_1");
			builder.put(grammarAccess.getStoryAccess().getImportsAssignment_2(), "rule__Story__ImportsAssignment_2");
			builder.put(grammarAccess.getStoryAccess().getScenariosAssignment_3(), "rule__Story__ScenariosAssignment_3");
			builder.put(grammarAccess.getExternalImportAccess().getNameAssignment_1(), "rule__ExternalImport__NameAssignment_1");
			builder.put(grammarAccess.getExternalImportAccess().getParamsAssignment_3(), "rule__ExternalImport__ParamsAssignment_3");
			builder.put(grammarAccess.getExternalImportAccess().getParamsAssignment_4_1(), "rule__ExternalImport__ParamsAssignment_4_1");
			builder.put(grammarAccess.getExternalImportAccess().getReturnTypeAssignment_7(), "rule__ExternalImport__ReturnTypeAssignment_7");
			builder.put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
			builder.put(grammarAccess.getScenarioAccess().getParamsAssignment_2_1(), "rule__Scenario__ParamsAssignment_2_1");
			builder.put(grammarAccess.getScenarioAccess().getParamsAssignment_2_2_1(), "rule__Scenario__ParamsAssignment_2_2_1");
			builder.put(grammarAccess.getScenarioAccess().getBindingsAssignment_4(), "rule__Scenario__BindingsAssignment_4");
			builder.put(grammarAccess.getScenarioAccess().getLocationsAssignment_5(), "rule__Scenario__LocationsAssignment_5");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getAnnounceAccess().getNameAssignment_1(), "rule__Announce__NameAssignment_1");
			builder.put(grammarAccess.getAnnounceAccess().getTextAssignment_2(), "rule__Announce__TextAssignment_2");
			builder.put(grammarAccess.getAnnounceAccess().getTargetsAssignment_3(), "rule__Announce__TargetsAssignment_3");
			builder.put(grammarAccess.getQuestionAccess().getNameAssignment_1(), "rule__Question__NameAssignment_1");
			builder.put(grammarAccess.getQuestionAccess().getTextAssignment_2(), "rule__Question__TextAssignment_2");
			builder.put(grammarAccess.getQuestionAccess().getValidateAssignment_4(), "rule__Question__ValidateAssignment_4");
			builder.put(grammarAccess.getQuestionAccess().getBindingAssignment_5_1(), "rule__Question__BindingAssignment_5_1");
			builder.put(grammarAccess.getQuestionAccess().getTargetsAssignment_6(), "rule__Question__TargetsAssignment_6");
			builder.put(grammarAccess.getEndAccess().getNameAssignment_1(), "rule__End__NameAssignment_1");
			builder.put(grammarAccess.getEndAccess().getTextAssignment_2(), "rule__End__TextAssignment_2");
			builder.put(grammarAccess.getTargetAccess().getTargetAssignment_1(), "rule__Target__TargetAssignment_1");
			builder.put(grammarAccess.getTargetAccess().getArgsAssignment_2_1_0(), "rule__Target__ArgsAssignment_2_1_0");
			builder.put(grammarAccess.getTargetAccess().getArgsAssignment_2_1_1_1(), "rule__Target__ArgsAssignment_2_1_1_1");
			builder.put(grammarAccess.getTargetAccess().getConditionAssignment_3_1(), "rule__Target__ConditionAssignment_3_1");
			builder.put(grammarAccess.getTargetAccess().getEndingTargetsAssignment_4_1(), "rule__Target__EndingTargetsAssignment_4_1");
			builder.put(grammarAccess.getEndingTargetAccess().getFromAssignment_1(), "rule__EndingTarget__FromAssignment_1");
			builder.put(grammarAccess.getEndingTargetAccess().getTargetAssignment_2(), "rule__EndingTarget__TargetAssignment_2");
			builder.put(grammarAccess.getExpAccess().getRightAssignment_1_1(), "rule__Exp__RightAssignment_1_1");
			builder.put(grammarAccess.getEqualsOrNotEqualsAccess().getRightAssignment_1_1(), "rule__EqualsOrNotEquals__RightAssignment_1_1");
			builder.put(grammarAccess.getCompareAccess().getRightAssignment_1_1(), "rule__Compare__RightAssignment_1_1");
			builder.put(grammarAccess.getConcatonationAccess().getRightAssignment_1_1(), "rule__Concatonation__RightAssignment_1_1");
			builder.put(grammarAccess.getAdditionSubtractionAccess().getRightAssignment_1_1(), "rule__AdditionSubtraction__RightAssignment_1_1");
			builder.put(grammarAccess.getMultiplicationDivisionAccess().getRightAssignment_1_1(), "rule__MultiplicationDivision__RightAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getTypeAssignment_0_1(), "rule__Primary__TypeAssignment_0_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_4_1(), "rule__Primary__ValueAssignment_4_1");
			builder.put(grammarAccess.getPrimaryAccess().getValueAssignment_5_1(), "rule__Primary__ValueAssignment_5_1");
			builder.put(grammarAccess.getPrimaryAccess().getRefAssignment_6_1(), "rule__Primary__RefAssignment_6_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpAssignment_7_2(), "rule__Primary__ExpAssignment_7_2");
			builder.put(grammarAccess.getPrimaryAccess().getFuncAssignment_8_1(), "rule__Primary__FuncAssignment_8_1");
			builder.put(grammarAccess.getPrimaryAccess().getArgsAssignment_8_3(), "rule__Primary__ArgsAssignment_8_3");
			builder.put(grammarAccess.getPrimaryAccess().getArgsAssignment_8_4_1(), "rule__Primary__ArgsAssignment_8_4_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpAssignment_9_2(), "rule__Primary__ExpAssignment_9_2");
			builder.put(grammarAccess.getVarBindingAccess().getNameAssignment_1(), "rule__VarBinding__NameAssignment_1");
			builder.put(grammarAccess.getVarBindingAccess().getTypeAssignment_3(), "rule__VarBinding__TypeAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private IF22GrammarAccess grammarAccess;

	@Override
	protected InternalIF22Parser createParser() {
		InternalIF22Parser result = new InternalIF22Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public IF22GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(IF22GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
