/*
 * generated by Xtext 2.26.0
 */
grammar InternalIF22;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package lomzt.mdsd.exam.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package lomzt.mdsd.exam.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import lomzt.mdsd.exam.services.IF22GrammarAccess;

}

@parser::members {

 	private IF22GrammarAccess grammarAccess;

    public InternalIF22Parser(TokenStream input, IF22GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Story";
   	}

   	@Override
   	protected IF22GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleStory
entryRuleStory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryRule()); }
	iv_ruleStory=ruleStory
	{ $current=$iv_ruleStory.current; }
	EOF;

// Rule Story
ruleStory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='story'
		{
			newLeafNode(otherlv_0, grammarAccess.getStoryAccess().getStoryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStoryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStoryAccess().getImportsExternalImportParserRuleCall_2_0());
				}
				lv_imports_2_0=ruleExternalImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoryRule());
					}
					add(
						$current,
						"imports",
						lv_imports_2_0,
						"lomzt.mdsd.exam.IF22.ExternalImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getStoryAccess().getScenariosScenarioParserRuleCall_3_0());
				}
				lv_scenarios_3_0=ruleScenario
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoryRule());
					}
					add(
						$current,
						"scenarios",
						lv_scenarios_3_0,
						"lomzt.mdsd.exam.IF22.Scenario");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleExternalImport
entryRuleExternalImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExternalImportRule()); }
	iv_ruleExternalImport=ruleExternalImport
	{ $current=$iv_ruleExternalImport.current; }
	EOF;

// Rule ExternalImport
ruleExternalImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getExternalImportAccess().getFunctionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExternalImportAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExternalImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getExternalImportAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalImportAccess().getParamsTypeParserRuleCall_3_0());
				}
				lv_params_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalImportRule());
					}
					add(
						$current,
						"params",
						lv_params_3_0,
						"lomzt.mdsd.exam.IF22.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getExternalImportAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExternalImportAccess().getParamsTypeParserRuleCall_4_1_0());
					}
					lv_params_5_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExternalImportRule());
						}
						add(
							$current,
							"params",
							lv_params_5_0,
							"lomzt.mdsd.exam.IF22.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getExternalImportAccess().getRightParenthesisKeyword_5());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getExternalImportAccess().getColonKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExternalImportAccess().getReturnTypeTypeParserRuleCall_7_0());
				}
				lv_returnType_8_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExternalImportRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_8_0,
						"lomzt.mdsd.exam.IF22.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getNumberAction_0_0(),
						$current);
				}
			)
			otherlv_1='number'
			{
				newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getNumberKeyword_0_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getBooleanAction_1_0(),
						$current);
				}
			)
			otherlv_3='boolean'
			{
				newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getBooleanKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getTypeAccess().getTextAction_2_0(),
						$current);
				}
			)
			otherlv_5='text'
			{
				newLeafNode(otherlv_5, grammarAccess.getTypeAccess().getTextKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	iv_ruleScenario=ruleScenario
	{ $current=$iv_ruleScenario.current; }
	EOF;

// Rule Scenario
ruleScenario returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scenario'
		{
			newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getScenarioKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getScenarioAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScenarioRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getScenarioAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getScenarioAccess().getParamsParameterParserRuleCall_2_1_0());
					}
					lv_params_3_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getScenarioRule());
						}
						add(
							$current,
							"params",
							lv_params_3_0,
							"lomzt.mdsd.exam.IF22.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getScenarioAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getScenarioAccess().getParamsParameterParserRuleCall_2_2_1_0());
						}
						lv_params_5_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getScenarioRule());
							}
							add(
								$current,
								"params",
								lv_params_5_0,
								"lomzt.mdsd.exam.IF22.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getScenarioAccess().getRightParenthesisKeyword_2_3());
			}
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getScenarioAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getBindingsVarBindingParserRuleCall_4_0());
				}
				lv_bindings_8_0=ruleVarBinding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					add(
						$current,
						"bindings",
						lv_bindings_8_0,
						"lomzt.mdsd.exam.IF22.VarBinding");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getScenarioAccess().getLocationsLocationParserRuleCall_5_0());
				}
				lv_locations_9_0=ruleLocation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScenarioRule());
					}
					add(
						$current,
						"locations",
						lv_locations_9_0,
						"lomzt.mdsd.exam.IF22.Location");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getScenarioAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"lomzt.mdsd.exam.IF22.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLocation
entryRuleLocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocationRule()); }
	iv_ruleLocation=ruleLocation
	{ $current=$iv_ruleLocation.current; }
	EOF;

// Rule Location
ruleLocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLocationAccess().getAnnounceParserRuleCall_0());
		}
		this_Announce_0=ruleAnnounce
		{
			$current = $this_Announce_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLocationAccess().getQuestionParserRuleCall_1());
		}
		this_Question_1=ruleQuestion
		{
			$current = $this_Question_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLocationAccess().getEndParserRuleCall_2());
		}
		this_End_2=ruleEnd
		{
			$current = $this_End_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAnnounce
entryRuleAnnounce returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnounceRule()); }
	iv_ruleAnnounce=ruleAnnounce
	{ $current=$iv_ruleAnnounce.current; }
	EOF;

// Rule Announce
ruleAnnounce returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='announce'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnounceAccess().getAnnounceKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAnnounceAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnnounceRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnounceAccess().getTextExpParserRuleCall_2_0());
				}
				lv_text_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnounceRule());
					}
					set(
						$current,
						"text",
						lv_text_2_0,
						"lomzt.mdsd.exam.IF22.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnounceAccess().getTargetsTargetParserRuleCall_3_0());
				}
				lv_targets_3_0=ruleTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnounceRule());
					}
					add(
						$current,
						"targets",
						lv_targets_3_0,
						"lomzt.mdsd.exam.IF22.Target");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleQuestion
entryRuleQuestion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQuestionRule()); }
	iv_ruleQuestion=ruleQuestion
	{ $current=$iv_ruleQuestion.current; }
	EOF;

// Rule Question
ruleQuestion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='question'
		{
			newLeafNode(otherlv_0, grammarAccess.getQuestionAccess().getQuestionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getQuestionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQuestionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getTextExpParserRuleCall_2_0());
				}
				lv_text_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					set(
						$current,
						"text",
						lv_text_2_0,
						"lomzt.mdsd.exam.IF22.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='as'
		{
			newLeafNode(otherlv_3, grammarAccess.getQuestionAccess().getAsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getValidateExpParserRuleCall_4_0());
				}
				lv_validate_4_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					set(
						$current,
						"validate",
						lv_validate_4_0,
						"lomzt.mdsd.exam.IF22.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='in'
			{
				newLeafNode(otherlv_5, grammarAccess.getQuestionAccess().getInKeyword_5_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getQuestionRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getQuestionAccess().getBindingVarBindingCrossReference_5_1_0());
					}
				)
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getQuestionAccess().getTargetsTargetParserRuleCall_6_0());
				}
				lv_targets_7_0=ruleTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQuestionRule());
					}
					add(
						$current,
						"targets",
						lv_targets_7_0,
						"lomzt.mdsd.exam.IF22.Target");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEnd
entryRuleEnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndRule()); }
	iv_ruleEnd=ruleEnd
	{ $current=$iv_ruleEnd.current; }
	EOF;

// Rule End
ruleEnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='end'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndAccess().getEndKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEndAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndAccess().getTextExpParserRuleCall_2_0());
				}
				lv_text_2_0=ruleExp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndRule());
					}
					set(
						$current,
						"text",
						lv_text_2_0,
						"lomzt.mdsd.exam.IF22.Exp");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleTarget
entryRuleTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	iv_ruleTarget=ruleTarget
	{ $current=$iv_ruleTarget.current; }
	EOF;

// Rule Target
ruleTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='to'
		{
			newLeafNode(otherlv_0, grammarAccess.getTargetAccess().getToKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTargetRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getTargetAccess().getTargetTargetableCrossReference_1_0());
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getTargetAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTargetAccess().getArgsExpParserRuleCall_2_1_0_0());
						}
						lv_args_3_0=ruleExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTargetRule());
							}
							add(
								$current,
								"args",
								lv_args_3_0,
								"lomzt.mdsd.exam.IF22.Exp");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getTargetAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTargetAccess().getArgsExpParserRuleCall_2_1_1_1_0());
							}
							lv_args_5_0=ruleExp
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTargetRule());
								}
								add(
									$current,
									"args",
									lv_args_5_0,
									"lomzt.mdsd.exam.IF22.Exp");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getTargetAccess().getRightParenthesisKeyword_2_2());
			}
		)?
		(
			otherlv_7='if'
			{
				newLeafNode(otherlv_7, grammarAccess.getTargetAccess().getIfKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTargetAccess().getConditionExpParserRuleCall_3_1_0());
					}
					lv_condition_8_0=ruleExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTargetRule());
						}
						set(
							$current,
							"condition",
							lv_condition_8_0,
							"lomzt.mdsd.exam.IF22.Exp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getTargetAccess().getLeftCurlyBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTargetAccess().getEndingTargetsEndingTargetParserRuleCall_4_1_0());
					}
					lv_endingTargets_10_0=ruleEndingTarget
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTargetRule());
						}
						add(
							$current,
							"endingTargets",
							lv_endingTargets_10_0,
							"lomzt.mdsd.exam.IF22.EndingTarget");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getTargetAccess().getRightCurlyBracketKeyword_4_2());
			}
		)?
	)
;

// Entry rule entryRuleEndingTarget
entryRuleEndingTarget returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEndingTargetRule()); }
	iv_ruleEndingTarget=ruleEndingTarget
	{ $current=$iv_ruleEndingTarget.current; }
	EOF;

// Rule EndingTarget
ruleEndingTarget returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='on'
		{
			newLeafNode(otherlv_0, grammarAccess.getEndingTargetAccess().getOnKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEndingTargetRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getEndingTargetAccess().getFromLocationCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEndingTargetAccess().getTargetTargetParserRuleCall_2_0());
				}
				lv_target_2_0=ruleTarget
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEndingTargetRule());
					}
					set(
						$current,
						"target",
						lv_target_2_0,
						"lomzt.mdsd.exam.IF22.Target");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExp
entryRuleExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current; }
	EOF;

// Rule Exp
ruleExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpAccess().getEqualsOrNotEqualsParserRuleCall_0());
		}
		this_EqualsOrNotEquals_0=ruleEqualsOrNotEquals
		{
			$current = $this_EqualsOrNotEquals_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getExpAccess().getAndLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='&&'
					{
						newLeafNode(otherlv_2, grammarAccess.getExpAccess().getAmpersandAmpersandKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getExpAccess().getOrLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='||'
					{
						newLeafNode(otherlv_4, grammarAccess.getExpAccess().getVerticalLineVerticalLineKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpAccess().getRightEqualsOrNotEqualsParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleEqualsOrNotEquals
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"lomzt.mdsd.exam.IF22.EqualsOrNotEquals");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEqualsOrNotEquals
entryRuleEqualsOrNotEquals returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualsOrNotEqualsRule()); }
	iv_ruleEqualsOrNotEquals=ruleEqualsOrNotEquals
	{ $current=$iv_ruleEqualsOrNotEquals.current; }
	EOF;

// Rule EqualsOrNotEquals
ruleEqualsOrNotEquals returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualsOrNotEqualsAccess().getCompareParserRuleCall_0());
		}
		this_Compare_0=ruleCompare
		{
			$current = $this_Compare_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualsOrNotEqualsAccess().getEqualsLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='=='
					{
						newLeafNode(otherlv_2, grammarAccess.getEqualsOrNotEqualsAccess().getEqualsSignEqualsSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualsOrNotEqualsAccess().getNotEqualsLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='!='
					{
						newLeafNode(otherlv_4, grammarAccess.getEqualsOrNotEqualsAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualsOrNotEqualsAccess().getRightCompareParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleCompare
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualsOrNotEqualsRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"lomzt.mdsd.exam.IF22.Compare");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCompare
entryRuleCompare returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCompareRule()); }
	iv_ruleCompare=ruleCompare
	{ $current=$iv_ruleCompare.current; }
	EOF;

// Rule Compare
ruleCompare returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCompareAccess().getConcatonationParserRuleCall_0());
		}
		this_Concatonation_0=ruleConcatonation
		{
			$current = $this_Concatonation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getCompareAccess().getGreaterLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='>'
					{
						newLeafNode(otherlv_2, grammarAccess.getCompareAccess().getGreaterThanSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getCompareAccess().getLesserLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='<'
					{
						newLeafNode(otherlv_4, grammarAccess.getCompareAccess().getLessThanSignKeyword_1_0_1_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getCompareAccess().getGreaterOrEqualsLeftAction_1_0_2_0(),
								$current);
						}
					)
					otherlv_6='>='
					{
						newLeafNode(otherlv_6, grammarAccess.getCompareAccess().getGreaterThanSignEqualsSignKeyword_1_0_2_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getCompareAccess().getLesserOrEqualsLeftAction_1_0_3_0(),
								$current);
						}
					)
					otherlv_8='<='
					{
						newLeafNode(otherlv_8, grammarAccess.getCompareAccess().getLessThanSignEqualsSignKeyword_1_0_3_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCompareAccess().getRightConcatonationParserRuleCall_1_1_0());
					}
					lv_right_9_0=ruleConcatonation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCompareRule());
						}
						set(
							$current,
							"right",
							lv_right_9_0,
							"lomzt.mdsd.exam.IF22.Concatonation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleConcatonation
entryRuleConcatonation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConcatonationRule()); }
	iv_ruleConcatonation=ruleConcatonation
	{ $current=$iv_ruleConcatonation.current; }
	EOF;

// Rule Concatonation
ruleConcatonation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConcatonationAccess().getAdditionSubtractionParserRuleCall_0());
		}
		this_AdditionSubtraction_0=ruleAdditionSubtraction
		{
			$current = $this_AdditionSubtraction_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getConcatonationAccess().getConcatLeftAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='&'
				{
					newLeafNode(otherlv_2, grammarAccess.getConcatonationAccess().getAmpersandKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getConcatonationAccess().getRightAdditionSubtractionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAdditionSubtraction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConcatonationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"lomzt.mdsd.exam.IF22.AdditionSubtraction");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditionSubtraction
entryRuleAdditionSubtraction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionSubtractionRule()); }
	iv_ruleAdditionSubtraction=ruleAdditionSubtraction
	{ $current=$iv_ruleAdditionSubtraction.current; }
	EOF;

// Rule AdditionSubtraction
ruleAdditionSubtraction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionSubtractionAccess().getMultiplicationDivisionParserRuleCall_0());
		}
		this_MultiplicationDivision_0=ruleMultiplicationDivision
		{
			$current = $this_MultiplicationDivision_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionSubtractionAccess().getPlusLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getAdditionSubtractionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAdditionSubtractionAccess().getMinusLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getAdditionSubtractionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionSubtractionAccess().getRightMultiplicationDivisionParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleMultiplicationDivision
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionSubtractionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"lomzt.mdsd.exam.IF22.MultiplicationDivision");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicationDivision
entryRuleMultiplicationDivision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationDivisionRule()); }
	iv_ruleMultiplicationDivision=ruleMultiplicationDivision
	{ $current=$iv_ruleMultiplicationDivision.current; }
	EOF;

// Rule MultiplicationDivision
ruleMultiplicationDivision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationDivisionAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationDivisionAccess().getMultLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMultiplicationDivisionAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicationDivisionAccess().getDivLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMultiplicationDivisionAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationDivisionAccess().getRightPrimaryParserRuleCall_1_1_0());
					}
					lv_right_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationDivisionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"lomzt.mdsd.exam.IF22.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getTypeValueAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getTypeTypeParserRuleCall_0_1_0());
					}
					lv_type_1_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"lomzt.mdsd.exam.IF22.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getThisAction_1_0(),
						$current);
				}
			)
			otherlv_3='this'
			{
				newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getThisKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getBooleanTrueAction_2_0(),
						$current);
				}
			)
			otherlv_5='true'
			{
				newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getTrueKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getBooleanFalseAction_3_0(),
						$current);
				}
			)
			otherlv_7='false'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getFalseKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getStringValueAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_value_9_0=RULE_STRING
					{
						newLeafNode(lv_value_9_0, grammarAccess.getPrimaryAccess().getValueSTRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_9_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNumberValueAction_5_0(),
						$current);
				}
			)
			(
				(
					lv_value_11_0=RULE_INT
					{
						newLeafNode(lv_value_11_0, grammarAccess.getPrimaryAccess().getValueINTTerminalRuleCall_5_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_11_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getVariableUseAction_6_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
					}
					otherlv_13=RULE_ID
					{
						newLeafNode(otherlv_13, grammarAccess.getPrimaryAccess().getRefBindingCrossReference_6_1_0());
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getParenthesisAction_7_0(),
						$current);
				}
			)
			otherlv_15='('
			{
				newLeafNode(otherlv_15, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpExpParserRuleCall_7_2_0());
					}
					lv_exp_16_0=ruleExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"exp",
							lv_exp_16_0,
							"lomzt.mdsd.exam.IF22.Exp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_17=')'
			{
				newLeafNode(otherlv_17, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_7_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getExternalCallAction_8_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
					}
					otherlv_19=RULE_ID
					{
						newLeafNode(otherlv_19, grammarAccess.getPrimaryAccess().getFuncExternalImportCrossReference_8_1_0());
					}
				)
			)
			otherlv_20='('
			{
				newLeafNode(otherlv_20, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_8_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getArgsExpParserRuleCall_8_3_0());
					}
					lv_args_21_0=ruleExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						add(
							$current,
							"args",
							lv_args_21_0,
							"lomzt.mdsd.exam.IF22.Exp");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				otherlv_22=','
				{
					newLeafNode(otherlv_22, grammarAccess.getPrimaryAccess().getCommaKeyword_8_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPrimaryAccess().getArgsExpParserRuleCall_8_4_1_0());
						}
						lv_args_23_0=ruleExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrimaryRule());
							}
							add(
								$current,
								"args",
								lv_args_23_0,
								"lomzt.mdsd.exam.IF22.Exp");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_24=')'
			{
				newLeafNode(otherlv_24, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_8_5());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_9_0(),
						$current);
				}
			)
			otherlv_26='!'
			{
				newLeafNode(otherlv_26, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_9_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExpExpParserRuleCall_9_2_0());
					}
					lv_exp_27_0=ruleExp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"exp",
							lv_exp_27_0,
							"lomzt.mdsd.exam.IF22.Exp");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleVarBinding
entryRuleVarBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarBindingRule()); }
	iv_ruleVarBinding=ruleVarBinding
	{ $current=$iv_ruleVarBinding.current; }
	EOF;

// Rule VarBinding
ruleVarBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVarBindingAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVarBindingAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarBindingRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getVarBindingAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarBindingAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarBindingRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"lomzt.mdsd.exam.IF22.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
