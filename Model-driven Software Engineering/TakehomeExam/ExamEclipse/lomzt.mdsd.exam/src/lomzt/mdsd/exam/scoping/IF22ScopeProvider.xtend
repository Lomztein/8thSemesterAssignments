/*
 * generated by Xtext 2.26.0
 */
package lomzt.mdsd.exam.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import static lomzt.mdsd.exam.Utilities.*
import lomzt.mdsd.exam.iF22.Story
import lomzt.mdsd.exam.iF22.Target
import lomzt.mdsd.exam.iF22.IF22Package
import lomzt.mdsd.exam.iF22.EndingTarget
import lomzt.mdsd.exam.iF22.Scenario
import org.eclipse.xtext.scoping.IScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class IF22ScopeProvider extends AbstractIF22ScopeProvider {
	override getScope(EObject context, EReference reference) {
		
		if (context instanceof Target && reference == IF22Package.Literals.TARGET__TARGET) {
			val scenarios = getParentOfType(context, typeof(Story)).scenarios
			return Scopes.scopeFor(scenarios, super.getScope(context, reference))
		}
		
		if (context instanceof EndingTarget && reference == IF22Package.Literals.ENDING_TARGET__FROM) {
			val scenario = getParentOfType(context, typeof(Target)).target as Scenario
			return Scopes.scopeFor(scenario.locations, IScope.NULLSCOPE)
		}
		
		return super.getScope(context, reference)
	}
}