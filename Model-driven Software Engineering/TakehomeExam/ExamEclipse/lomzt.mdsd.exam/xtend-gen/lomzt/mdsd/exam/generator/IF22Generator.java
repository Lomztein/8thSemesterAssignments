/**
 * generated by Xtext 2.26.0
 */
package lomzt.mdsd.exam.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;
import lomzt.mdsd.exam.Utilities;
import lomzt.mdsd.exam.iF22.And;
import lomzt.mdsd.exam.iF22.Announce;
import lomzt.mdsd.exam.iF22.Binding;
import lomzt.mdsd.exam.iF22.BooleanFalse;
import lomzt.mdsd.exam.iF22.BooleanTrue;
import lomzt.mdsd.exam.iF22.Concat;
import lomzt.mdsd.exam.iF22.Div;
import lomzt.mdsd.exam.iF22.End;
import lomzt.mdsd.exam.iF22.EndingTarget;
import lomzt.mdsd.exam.iF22.Equals;
import lomzt.mdsd.exam.iF22.Expression;
import lomzt.mdsd.exam.iF22.ExternalCall;
import lomzt.mdsd.exam.iF22.ExternalImport;
import lomzt.mdsd.exam.iF22.Greater;
import lomzt.mdsd.exam.iF22.GreaterOrEquals;
import lomzt.mdsd.exam.iF22.Lesser;
import lomzt.mdsd.exam.iF22.LesserOrEquals;
import lomzt.mdsd.exam.iF22.Location;
import lomzt.mdsd.exam.iF22.Minus;
import lomzt.mdsd.exam.iF22.Mult;
import lomzt.mdsd.exam.iF22.Not;
import lomzt.mdsd.exam.iF22.NotEquals;
import lomzt.mdsd.exam.iF22.NumberValue;
import lomzt.mdsd.exam.iF22.Or;
import lomzt.mdsd.exam.iF22.Parameter;
import lomzt.mdsd.exam.iF22.Parenthesis;
import lomzt.mdsd.exam.iF22.Plus;
import lomzt.mdsd.exam.iF22.Question;
import lomzt.mdsd.exam.iF22.Scenario;
import lomzt.mdsd.exam.iF22.Story;
import lomzt.mdsd.exam.iF22.StringValue;
import lomzt.mdsd.exam.iF22.Target;
import lomzt.mdsd.exam.iF22.Targetable;
import lomzt.mdsd.exam.iF22.Text;
import lomzt.mdsd.exam.iF22.This;
import lomzt.mdsd.exam.iF22.Type;
import lomzt.mdsd.exam.iF22.TypeValue;
import lomzt.mdsd.exam.iF22.VarBinding;
import lomzt.mdsd.exam.iF22.VariableUse;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class IF22Generator extends AbstractGenerator {
  private static final String PACKAGE = "interactive_fiction";
  
  private static final String QUESTION_LAST_INPUT = "__last_input";
  
  private static final String PARAM_LETTERS = "abcdefghijklmnopqrstuvxyzæøå";
  
  private static int paramIndex = 0;
  
  private static Question currentQuestion = null;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Story story = Iterators.<Story>filter(resource.getAllContents(), Story.class).next();
    fsa.generateFile((IF22Generator.PACKAGE + "/common/Scenario.java"), IF22Generator.scenarioBaseClass());
    String _snakeCase = IF22Generator.toSnakeCase(story.getName());
    String _plus = ((IF22Generator.PACKAGE + "/") + _snakeCase);
    String _plus_1 = (_plus + "/");
    String _plus_2 = (_plus_1 + "Game.java");
    fsa.generateFile(_plus_2, IF22Generator.compileMainClass(story));
    String _snakeCase_1 = IF22Generator.toSnakeCase(story.getName());
    String _plus_3 = ((IF22Generator.PACKAGE + "/") + _snakeCase_1);
    String _plus_4 = (_plus_3 + "/");
    String _plus_5 = (_plus_4 + "External.java");
    fsa.generateFile(_plus_5, IF22Generator.compileExternalInterface(story));
    EList<Scenario> _scenarios = story.getScenarios();
    for (final Scenario scenario : _scenarios) {
      String _snakeCase_2 = IF22Generator.toSnakeCase(story.getName());
      String _plus_6 = ((IF22Generator.PACKAGE + "/") + _snakeCase_2);
      String _plus_7 = (_plus_6 + "/");
      String _plus_8 = (_plus_7 + "Scenario");
      String _name = scenario.getName();
      String _plus_9 = (_plus_8 + _name);
      String _plus_10 = (_plus_9 + ".java");
      fsa.generateFile(_plus_10, 
        IF22Generator.compileScenarioClass(scenario));
    }
  }
  
  public static CharSequence scenarioBaseClass() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package interactive_fiction.common;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.io.BufferedReader;");
    _builder.newLine();
    _builder.append("import java.io.InputStreamReader;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class Scenario {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String nextInteraction;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected String calledScenarioEnd;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public abstract String interact() throws IOException ;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void changeInput(InputStreamReader streamReader) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("br = new BufferedReader(streamReader);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence compileMainClass(final Story story) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package interactive_fiction.");
    String _snakeCase = IF22Generator.toSnakeCase(story.getName());
    _builder.append(_snakeCase);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import interactive_fiction.common.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Game{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Scenario start;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _hasExternalImports = IF22Generator.hasExternalImports(story);
      if (_hasExternalImports) {
        _builder.append("\t");
        _builder.append("public Game(External external) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.start = new ");
        String _className = IF22Generator.className(story.getScenarios().get(0));
        _builder.append(_className, "\t\t");
        _builder.append("(external);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("public Game() {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("this.start = new ");
        String _className_1 = IF22Generator.className(story.getScenarios().get(0));
        _builder.append(_className_1, "\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void play()  throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("start.interact();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static CharSequence compileScenarioClass(final Scenario scenario) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package interactive_fiction.");
    String _snakeCase = IF22Generator.toSnakeCase(Utilities.<Story>getParentOfType(scenario, Story.class).getName());
    _builder.append(_snakeCase);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import interactive_fiction.common.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _className = IF22Generator.className(scenario);
    _builder.append(_className);
    _builder.append(" extends Scenario {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("External external;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String ");
    _builder.append(IF22Generator.QUESTION_LAST_INPUT, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _compileBindings = IF22Generator.compileBindings(scenario);
    _builder.append(_compileBindings, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _className_1 = IF22Generator.className(scenario);
    _builder.append(_className_1, "\t");
    _builder.append("(");
    final Function<Parameter, CharSequence> _function = (Parameter x) -> {
      String _paramToJavaParam = IF22Generator.paramToJavaParam(x);
      return ((CharSequence) _paramToJavaParam);
    };
    String _join = String.join(", ", scenario.getParams().stream().<CharSequence>map(_function).collect(Collectors.<CharSequence>toList()));
    _builder.append(_join, "\t");
    _builder.append(") { ");
    _builder.newLineIfNotEmpty();
    {
      EList<Parameter> _params = scenario.getParams();
      for(final Parameter param : _params) {
        _builder.append("\t\t");
        String _bindingName = IF22Generator.bindingName(param);
        _builder.append(_bindingName, "\t\t");
        _builder.append(" = ");
        String _name = param.getName();
        _builder.append(_name, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _className_2 = IF22Generator.className(scenario);
    _builder.append(_className_2, "\t");
    _builder.append("(");
    final Function<Parameter, CharSequence> _function_1 = (Parameter x) -> {
      String _paramToJavaParam = IF22Generator.paramToJavaParam(x);
      return ((CharSequence) _paramToJavaParam);
    };
    String _join_1 = String.join(", ", scenario.getParams().stream().<CharSequence>map(_function_1).collect(Collectors.<CharSequence>toList()));
    _builder.append(_join_1, "\t");
    String _addPrefixIfAnyInList = IF22Generator.addPrefixIfAnyInList("External external", ", ", scenario.getParams());
    _builder.append(_addPrefixIfAnyInList, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this.external = external;");
    _builder.newLine();
    {
      EList<Parameter> _params_1 = scenario.getParams();
      for(final Parameter param_1 : _params_1) {
        _builder.append("\t\t");
        String _bindingName_1 = IF22Generator.bindingName(param_1);
        _builder.append(_bindingName_1, "\t\t");
        _builder.append(" = ");
        String _name_1 = param_1.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String interact() throws IOException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String calledScenarioEnd = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("nextInteraction = \"");
    String _name_2 = scenario.getLocations().get(0).getName();
    _builder.append(_name_2, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("while(true){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("switch(nextInteraction){");
    _builder.newLine();
    {
      EList<Location> _locations = scenario.getLocations();
      for(final Location location : _locations) {
        _builder.append("\t\t\t\t\t");
        _builder.append("case \"");
        String _name_3 = location.getName();
        _builder.append(_name_3, "\t\t\t\t\t");
        _builder.append("\":");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t\t");
        _builder.append("\t");
        CharSequence _compileScenarioLocation = IF22Generator.compileScenarioLocation(location);
        _builder.append(_compileScenarioLocation, "\t\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (Exception ex) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("System.out.println(\"An error occured, please try again..\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static boolean hasExternalImports(final Story story) {
    int _size = story.getImports().size();
    return (_size > 0);
  }
  
  public static String addPrefixIfAnyInList(final String input, final String prefix, final List list) {
    int _size = list.size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      return (prefix + input);
    } else {
      return input;
    }
  }
  
  public static CharSequence compileExternalInterface(final Story story) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("package interactive_fiction.");
    String _snakeCase = IF22Generator.toSnakeCase(story.getName());
    _builder.append(_snakeCase);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public interface External {");
    _builder.newLine();
    {
      EList<ExternalImport> _imports = story.getImports();
      for(final ExternalImport importFuncs : _imports) {
        _builder.append("\t");
        _builder.append("public ");
        String _typeToJavaType = Utilities.typeToJavaType(importFuncs.getReturnType());
        _builder.append(_typeToJavaType, "\t");
        _builder.append(" ");
        String _name = importFuncs.getName();
        _builder.append(_name, "\t");
        _builder.append("(");
        final Function<Type, String> _function = (Type x) -> {
          String _typeToJavaType_1 = Utilities.typeToJavaType(x);
          String _plus = (_typeToJavaType_1 + " ");
          char _paramLetter = IF22Generator.getParamLetter();
          return (_plus + Character.valueOf(_paramLetter));
        };
        String _join = String.join(", ", importFuncs.getParams().stream().<String>map(_function).collect(Collectors.<String>toList()));
        _builder.append(_join, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static char getParamLetter() {
    int _plusPlus = IF22Generator.paramIndex++;
    int _length = IF22Generator.PARAM_LETTERS.length();
    final int index = (_plusPlus % _length);
    return IF22Generator.PARAM_LETTERS.charAt(index);
  }
  
  public static String paramToJavaParam(final Parameter parameter) {
    String _typeToJavaType = Utilities.typeToJavaType(parameter.getType());
    String _plus = (_typeToJavaType + " ");
    String _name = parameter.getName();
    return (_plus + _name);
  }
  
  public static String compileBindings(final Scenario scenario) {
    final ArrayList<Binding> bindings = Utilities.<Binding>getChildrenOfType(scenario, Binding.class);
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Binding binding : bindings) {
        String _compileBinding = IF22Generator.compileBinding(binding);
        _builder.append(_compileBinding);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  public static String compileBinding(final Binding binding) {
    String _switchResult = null;
    boolean _matched = false;
    if (binding instanceof VarBinding) {
      _matched=true;
      String _typeToJavaType = Utilities.typeToJavaType(((VarBinding)binding).getType());
      String _plus = (_typeToJavaType + " ");
      String _bindingName = IF22Generator.bindingName(binding);
      String _plus_1 = (_plus + _bindingName);
      _switchResult = (_plus_1 + ";");
    }
    if (!_matched) {
      if (binding instanceof Parameter) {
        _matched=true;
        String _typeToJavaType = Utilities.typeToJavaType(((Parameter)binding).getType());
        String _plus = (_typeToJavaType + " ");
        String _bindingName = IF22Generator.bindingName(binding);
        String _plus_1 = (_plus + _bindingName);
        _switchResult = (_plus_1 + ";");
      }
    }
    return _switchResult;
  }
  
  protected static CharSequence _compileScenarioLocation(final Announce announce) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _text = announce.getText();
      boolean _tripleNotEquals = (_text != null);
      if (_tripleNotEquals) {
        CharSequence _compilePrintout = IF22Generator.compilePrintout(announce.getText());
        _builder.append(_compilePrintout);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Target> _targets = announce.getTargets();
      for(final Target target : _targets) {
        CharSequence _compileTarget = IF22Generator.compileTarget(target);
        _builder.append(_compileTarget);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("break;");
    _builder.newLine();
    return _builder;
  }
  
  protected static CharSequence _compileScenarioLocation(final Question question) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _text = question.getText();
      boolean _tripleNotEquals = (_text != null);
      if (_tripleNotEquals) {
        CharSequence _compilePrintout = IF22Generator.compilePrintout(question.getText());
        _builder.append(_compilePrintout);
        _builder.newLineIfNotEmpty();
      }
    }
    String _xblockexpression = null;
    {
      IF22Generator.currentQuestion = question;
      _xblockexpression = "";
    }
    _builder.append(_xblockexpression);
    _builder.newLineIfNotEmpty();
    _builder.append(IF22Generator.QUESTION_LAST_INPUT);
    _builder.append(" = br.readLine();");
    _builder.newLineIfNotEmpty();
    String _defineThisBinding = IF22Generator.defineThisBinding(question);
    _builder.append(_defineThisBinding);
    _builder.append(" = ");
    String _compileConvertInputTo = IF22Generator.compileConvertInputTo(IF22Generator.QUESTION_LAST_INPUT, Utilities.inputType(question));
    _builder.append(_compileConvertInputTo);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    {
      Expression _validate = question.getValidate();
      boolean _not = (!(_validate instanceof TypeValue));
      if (_not) {
        _builder.append("if (!(");
        CharSequence _compileExpression = IF22Generator.compileExpression(question.getValidate());
        _builder.append(_compileExpression);
        _builder.append(")) {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("throw new Exception(\"Invalid input, please try again.\");");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      VarBinding _binding = question.getBinding();
      boolean _tripleNotEquals_1 = (_binding != null);
      if (_tripleNotEquals_1) {
        String _bindingName = IF22Generator.bindingName(question.getBinding());
        _builder.append(_bindingName);
        _builder.append(" = ");
        String _compileConvertInputTo_1 = IF22Generator.compileConvertInputTo(IF22Generator.QUESTION_LAST_INPUT, Utilities.inputType(question));
        _builder.append(_compileConvertInputTo_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Target> _targets = question.getTargets();
      for(final Target target : _targets) {
        CharSequence _compileTarget = IF22Generator.compileTarget(target);
        _builder.append(_compileTarget);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("break;");
    _builder.newLine();
    return _builder;
  }
  
  public static String defineThisBinding(final Question question) {
    String _inputType = Utilities.inputType(question);
    String _plus = (_inputType + " ");
    String _thisBinding = IF22Generator.thisBinding(question);
    return (_plus + _thisBinding);
  }
  
  public static String thisBinding(final Question question) {
    String _name = question.getName();
    return ("__this_" + _name);
  }
  
  protected static CharSequence _compileScenarioLocation(final End end) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _text = end.getText();
      boolean _tripleNotEquals = (_text != null);
      if (_tripleNotEquals) {
        CharSequence _compilePrintout = IF22Generator.compilePrintout(end.getText());
        _builder.append(_compilePrintout);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("return \"");
    String _name = end.getName();
    _builder.append(_name);
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public static CharSequence compilePrintout(final Expression exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(");
    CharSequence _compileExpression = IF22Generator.compileExpression(exp);
    _builder.append(_compileExpression);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public static CharSequence compileTarget(final Target target) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Expression _condition = target.getCondition();
      boolean _tripleNotEquals = (_condition != null);
      if (_tripleNotEquals) {
        _builder.append("if (");
        CharSequence _compileExpression = IF22Generator.compileExpression(target.getCondition());
        _builder.append(_compileExpression);
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        CharSequence _compileTransition = IF22Generator.compileTransition(target);
        _builder.append(_compileTransition, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
        _builder.append("}");
        _builder.newLine();
      } else {
        CharSequence _compileTransition_1 = IF22Generator.compileTransition(target);
        _builder.append(_compileTransition_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public static CharSequence compileTransition(final Target target) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Targetable _target = target.getTarget();
      if ((_target instanceof Location)) {
        _builder.append("nextInteraction = \"");
        String _name = target.getTarget().getName();
        _builder.append(_name);
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      } else {
        Targetable _target_1 = target.getTarget();
        if ((_target_1 instanceof Scenario)) {
          _builder.append("calledScenarioEnd = new ");
          Targetable _target_2 = target.getTarget();
          String _className = IF22Generator.className(((Scenario) _target_2));
          _builder.append(_className);
          _builder.append("(");
          final Function<Expression, CharSequence> _function = (Expression x) -> {
            return IF22Generator.compileExpression(x);
          };
          String _join = String.join(",", target.getArgs().stream().<CharSequence>map(_function).collect(Collectors.<CharSequence>toList()));
          _builder.append(_join);
          String _addPrefixIfAnyInList = IF22Generator.addPrefixIfAnyInList("external", ", ", target.getArgs());
          _builder.append(_addPrefixIfAnyInList);
          _builder.append(").interact();");
          _builder.newLineIfNotEmpty();
          {
            EList<EndingTarget> _endingTargets = target.getEndingTargets();
            for(final EndingTarget et : _endingTargets) {
              CharSequence _compileEndingTarget = IF22Generator.compileEndingTarget(et);
              _builder.append(_compileEndingTarget);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public static CharSequence compileEndingTarget(final EndingTarget endingTarget) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if (calledScenarioEnd.equals(\"");
    String _name = endingTarget.getFrom().getName();
    _builder.append(_name);
    _builder.append("\")) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("nextInteraction = \"");
    String _name_1 = endingTarget.getTarget().getTarget().getName();
    _builder.append(_name_1, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static String className(final Scenario scenario) {
    String _name = scenario.getName();
    return ("Scenario" + _name);
  }
  
  public static String readBr(final Type readAs) {
    String _switchResult = null;
    boolean _matched = false;
    if (readAs instanceof lomzt.mdsd.exam.iF22.Number) {
      _matched=true;
      _switchResult = "Integer.parseInt(br.readLine())";
    }
    if (!_matched) {
      if (readAs instanceof lomzt.mdsd.exam.iF22.Boolean) {
        _matched=true;
        _switchResult = "Boolean.parseBoolean(br.readline())";
      }
    }
    if (!_matched) {
      if (readAs instanceof Text) {
        _matched=true;
        _switchResult = "br.readLine()";
      }
    }
    return _switchResult;
  }
  
  public static String bindingName(final Binding binding) {
    String _switchResult = null;
    boolean _matched = false;
    if (binding instanceof VarBinding) {
      _matched=true;
      String _name = ((VarBinding)binding).getName();
      _switchResult = ("__var_" + _name);
    }
    if (!_matched) {
      if (binding instanceof Parameter) {
        _matched=true;
        String _name = ((Parameter)binding).getName();
        _switchResult = ("__param_" + _name);
      }
    }
    return _switchResult;
  }
  
  protected static String _compileConvertInputTo(final String str, final Type type) {
    String _switchResult = null;
    boolean _matched = false;
    if (type instanceof lomzt.mdsd.exam.iF22.Number) {
      _matched=true;
      _switchResult = (("Integer.parseInt(" + str) + ")");
    }
    if (!_matched) {
      if (type instanceof lomzt.mdsd.exam.iF22.Boolean) {
        _matched=true;
        _switchResult = (("Boolean.parseBoolean(" + str) + ")");
      }
    }
    if (!_matched) {
      if (type instanceof Text) {
        _matched=true;
        _switchResult = (str + ".toString()");
      }
    }
    return _switchResult;
  }
  
  protected static String _compileConvertInputTo(final String str, final String javaType) {
    String _switchResult = null;
    if (javaType != null) {
      switch (javaType) {
        case "int":
          _switchResult = (("Integer.parseInt(" + str) + ")");
          break;
        case "boolean":
          _switchResult = (("Boolean.parseBoolean(" + str) + ")");
          break;
        case "String":
          _switchResult = (str + ".toString()");
          break;
      }
    }
    return _switchResult;
  }
  
  protected static String _properEquals(final Equals eq) {
    final boolean anyString = (Objects.equal(Utilities.getExpressionOutputType(eq.getLeft()), "String") || Objects.equal(Utilities.getExpressionOutputType(eq.getRight()), "String"));
    if (anyString) {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _compileExpression = IF22Generator.compileExpression(eq.getLeft());
      _builder.append(_compileExpression);
      _builder.append(".equals(");
      CharSequence _compileExpression_1 = IF22Generator.compileExpression(eq.getRight());
      _builder.append(_compileExpression_1);
      _builder.append(")");
      return _builder.toString();
    } else {
      CharSequence _compileExpression_2 = IF22Generator.compileExpression(eq.getLeft());
      String _plus = (_compileExpression_2 + " == ");
      CharSequence _compileExpression_3 = IF22Generator.compileExpression(eq.getRight());
      return (_plus + _compileExpression_3);
    }
  }
  
  protected static String _properEquals(final NotEquals neq) {
    final boolean anyString = (Objects.equal(Utilities.getExpressionOutputType(neq.getLeft()), "String") || Objects.equal(Utilities.getExpressionOutputType(neq.getRight()), "String"));
    if (anyString) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(!");
      CharSequence _compileExpression = IF22Generator.compileExpression(neq.getLeft());
      _builder.append(_compileExpression);
      _builder.append(".equals(");
      CharSequence _compileExpression_1 = IF22Generator.compileExpression(neq.getRight());
      _builder.append(_compileExpression_1);
      _builder.append("))");
      return _builder.toString();
    } else {
      CharSequence _compileExpression_2 = IF22Generator.compileExpression(neq.getLeft());
      String _plus = (_compileExpression_2 + " == ");
      CharSequence _compileExpression_3 = IF22Generator.compileExpression(neq.getRight());
      return (_plus + _compileExpression_3);
    }
  }
  
  public static CharSequence compileExpression(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof And) {
      _matched=true;
      CharSequence _compileExpression = IF22Generator.compileExpression(((And)exp).getLeft());
      String _plus = (_compileExpression + " && ");
      CharSequence _compileExpression_1 = IF22Generator.compileExpression(((And)exp).getRight());
      _switchResult = (_plus + _compileExpression_1);
    }
    if (!_matched) {
      if (exp instanceof Or) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Or)exp).getLeft());
        String _plus = (_compileExpression + " || ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Or)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Equals) {
        _matched=true;
        _switchResult = IF22Generator.properEquals(exp);
      }
    }
    if (!_matched) {
      if (exp instanceof NotEquals) {
        _matched=true;
        _switchResult = IF22Generator.properEquals(exp);
      }
    }
    if (!_matched) {
      if (exp instanceof Greater) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Greater)exp).getLeft());
        String _plus = (_compileExpression + " > ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Greater)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Lesser) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Lesser)exp).getLeft());
        String _plus = (_compileExpression + " < ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Lesser)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof GreaterOrEquals) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((GreaterOrEquals)exp).getLeft());
        String _plus = (_compileExpression + " >= ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((GreaterOrEquals)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof LesserOrEquals) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((LesserOrEquals)exp).getLeft());
        String _plus = (_compileExpression + " <= ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((LesserOrEquals)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Concat) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Concat)exp).getLeft());
        String _plus = (_compileExpression + " + ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Concat)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Plus) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Plus)exp).getLeft());
        String _plus = (_compileExpression + " + ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Plus)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Minus)exp).getLeft());
        String _plus = (_compileExpression + " - ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Minus)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Mult)exp).getLeft());
        String _plus = (_compileExpression + " * ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Mult)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Div)exp).getLeft());
        String _plus = (_compileExpression + " / ");
        CharSequence _compileExpression_1 = IF22Generator.compileExpression(((Div)exp).getRight());
        _switchResult = (_plus + _compileExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof TypeValue) {
        _matched=true;
        _switchResult = IF22Generator.thisBinding(IF22Generator.currentQuestion);
      }
    }
    if (!_matched) {
      if (exp instanceof This) {
        _matched=true;
        _switchResult = IF22Generator.thisBinding(IF22Generator.currentQuestion);
      }
    }
    if (!_matched) {
      if (exp instanceof BooleanTrue) {
        _matched=true;
        _switchResult = "true";
      }
    }
    if (!_matched) {
      if (exp instanceof BooleanFalse) {
        _matched=true;
        _switchResult = "false";
      }
    }
    if (!_matched) {
      if (exp instanceof StringValue) {
        _matched=true;
        String _string = ((StringValue)exp).getValue().toString();
        String _plus = ("\"" + _string);
        _switchResult = (_plus + "\"");
      }
    }
    if (!_matched) {
      if (exp instanceof NumberValue) {
        _matched=true;
        _switchResult = Integer.valueOf(((NumberValue)exp).getValue()).toString();
      }
    }
    if (!_matched) {
      if (exp instanceof VariableUse) {
        _matched=true;
        _switchResult = IF22Generator.bindingName(((VariableUse)exp).getRef());
      }
    }
    if (!_matched) {
      if (exp instanceof Parenthesis) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Parenthesis)exp).getExp());
        String _plus = ("(" + _compileExpression);
        _switchResult = (_plus + ")");
      }
    }
    if (!_matched) {
      if (exp instanceof ExternalCall) {
        _matched=true;
        String _name = ((ExternalCall)exp).getFunc().getName();
        String _plus = ("external." + _name);
        String _plus_1 = (_plus + "(");
        final Function<Expression, CharSequence> _function = (Expression x) -> {
          return IF22Generator.compileExpression(x);
        };
        String _join = String.join(",", ((ExternalCall)exp).getArgs().stream().<CharSequence>map(_function).collect(Collectors.<CharSequence>toList()));
        String _plus_2 = (_plus_1 + _join);
        _switchResult = (_plus_2 + ")");
      }
    }
    if (!_matched) {
      if (exp instanceof Not) {
        _matched=true;
        CharSequence _compileExpression = IF22Generator.compileExpression(((Not)exp).getExp());
        _switchResult = ("!" + _compileExpression);
      }
    }
    return _switchResult;
  }
  
  public static String toSnakeCase(final String text) {
    String result = "";
    final char starting = text.charAt(0);
    String _result = result;
    char _lowerCase = Character.toLowerCase(starting);
    result = (_result + Character.valueOf(_lowerCase));
    for (int i = 1; (i < text.length()); i++) {
      {
        final char character = text.charAt(i);
        boolean _isUpperCase = Character.isUpperCase(character);
        if (_isUpperCase) {
          String _result_1 = result;
          char _lowerCase_1 = Character.toLowerCase(character);
          String _plus = ("_" + Character.valueOf(_lowerCase_1));
          result = (_result_1 + _plus);
        } else {
          String _result_2 = result;
          result = (_result_2 + Character.valueOf(character));
        }
      }
    }
    return result;
  }
  
  public static CharSequence compileScenarioLocation(final Location announce) {
    if (announce instanceof Announce) {
      return _compileScenarioLocation((Announce)announce);
    } else if (announce instanceof End) {
      return _compileScenarioLocation((End)announce);
    } else if (announce instanceof Question) {
      return _compileScenarioLocation((Question)announce);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(announce).toString());
    }
  }
  
  public static String compileConvertInputTo(final String str, final Object type) {
    if (type instanceof Type) {
      return _compileConvertInputTo(str, (Type)type);
    } else if (type instanceof String) {
      return _compileConvertInputTo(str, (String)type);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(str, type).toString());
    }
  }
  
  public static String properEquals(final Expression eq) {
    if (eq instanceof Equals) {
      return _properEquals((Equals)eq);
    } else if (eq instanceof NotEquals) {
      return _properEquals((NotEquals)eq);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(eq).toString());
    }
  }
}
