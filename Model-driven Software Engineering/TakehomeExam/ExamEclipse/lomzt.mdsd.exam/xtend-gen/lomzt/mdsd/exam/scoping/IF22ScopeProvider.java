/**
 * generated by Xtext 2.26.0
 */
package lomzt.mdsd.exam.scoping;

import com.google.common.base.Objects;
import lomzt.mdsd.exam.Utilities;
import lomzt.mdsd.exam.iF22.EndingTarget;
import lomzt.mdsd.exam.iF22.IF22Package;
import lomzt.mdsd.exam.iF22.Scenario;
import lomzt.mdsd.exam.iF22.Story;
import lomzt.mdsd.exam.iF22.Target;
import lomzt.mdsd.exam.iF22.Targetable;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class IF22ScopeProvider extends AbstractIF22ScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof Target) && Objects.equal(reference, IF22Package.Literals.TARGET__TARGET))) {
      final EList<Scenario> scenarios = Utilities.<Story>getParentOfType(context, Story.class).getScenarios();
      return Scopes.scopeFor(scenarios, super.getScope(context, reference));
    }
    if (((context instanceof EndingTarget) && Objects.equal(reference, IF22Package.Literals.ENDING_TARGET__FROM))) {
      Targetable _target = Utilities.<Target>getParentOfType(context, Target.class).getTarget();
      final Scenario scenario = ((Scenario) _target);
      return Scopes.scopeFor(scenario.getLocations(), IScope.NULLSCOPE);
    }
    return super.getScope(context, reference);
  }
}
