/*
 * generated by Xtext 2.26.0
 */
package lomzt.mdsd.exam.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IF22GrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsExternalImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cScenariosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScenariosScenarioParserRuleCall_3_0 = (RuleCall)cScenariosAssignment_3.eContents().get(0);
		
		//Story:
		//    'story' name=ID
		//    imports += ExternalImport*
		//    scenarios += Scenario*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'story' name=ID
		//imports += ExternalImport*
		//scenarios += Scenario*
		public Group getGroup() { return cGroup; }
		
		//'story'
		public Keyword getStoryKeyword_0() { return cStoryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//imports += ExternalImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//ExternalImport
		public RuleCall getImportsExternalImportParserRuleCall_2_0() { return cImportsExternalImportParserRuleCall_2_0; }
		
		//scenarios += Scenario*
		public Assignment getScenariosAssignment_3() { return cScenariosAssignment_3; }
		
		//Scenario
		public RuleCall getScenariosScenarioParserRuleCall_3_0() { return cScenariosScenarioParserRuleCall_3_0; }
	}
	public class ExternalImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.ExternalImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamsTypeParserRuleCall_3_0 = (RuleCall)cParamsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParamsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParamsTypeParserRuleCall_4_1_0 = (RuleCall)cParamsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReturnTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReturnTypeTypeParserRuleCall_7_0 = (RuleCall)cReturnTypeAssignment_7.eContents().get(0);
		
		//ExternalImport:
		//    'function' name=ID '(' params += Type? (',' params += Type)* ')' ':' returnType = Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' name=ID '(' params += Type? (',' params += Type)* ')' ':' returnType = Type
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//params += Type?
		public Assignment getParamsAssignment_3() { return cParamsAssignment_3; }
		
		//Type
		public RuleCall getParamsTypeParserRuleCall_3_0() { return cParamsTypeParserRuleCall_3_0; }
		
		//(',' params += Type)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//params += Type
		public Assignment getParamsAssignment_4_1() { return cParamsAssignment_4_1; }
		
		//Type
		public RuleCall getParamsTypeParserRuleCall_4_1_0() { return cParamsTypeParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//returnType = Type
		public Assignment getReturnTypeAssignment_7() { return cReturnTypeAssignment_7; }
		
		//Type
		public RuleCall getReturnTypeTypeParserRuleCall_7_0() { return cReturnTypeTypeParserRuleCall_7_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNumberAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNumberKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBooleanKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTextAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTextKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Type:
		//    {Number} 'number' | {Boolean} 'boolean' | {Text} 'text'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Number} 'number' | {Boolean} 'boolean' | {Text} 'text'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Number} 'number'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Number}
		public Action getNumberAction_0_0() { return cNumberAction_0_0; }
		
		//'number'
		public Keyword getNumberKeyword_0_1() { return cNumberKeyword_0_1; }
		
		//{Boolean} 'boolean'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Boolean}
		public Action getBooleanAction_1_0() { return cBooleanAction_1_0; }
		
		//'boolean'
		public Keyword getBooleanKeyword_1_1() { return cBooleanKeyword_1_1; }
		
		//{Text} 'text'
		public Group getGroup_2() { return cGroup_2; }
		
		//{Text}
		public Action getTextAction_2_0() { return cTextAction_2_0; }
		
		//'text'
		public Keyword getTextKeyword_2_1() { return cTextKeyword_2_1; }
	}
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBindingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBindingsVarBindingParserRuleCall_4_0 = (RuleCall)cBindingsAssignment_4.eContents().get(0);
		private final Assignment cLocationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocationsLocationParserRuleCall_5_0 = (RuleCall)cLocationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Scenario:
		//    'scenario' name=ID ('(' params += Parameter (',' params += Parameter)* ')')? '{'
		//    bindings += VarBinding*
		//    locations += Location+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'scenario' name=ID ('(' params += Parameter (',' params += Parameter)* ')')? '{'
		//bindings += VarBinding*
		//locations += Location+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'scenario'
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' params += Parameter (',' params += Parameter)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//params += Parameter
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_1_0() { return cParamsParameterParserRuleCall_2_1_0; }
		
		//(',' params += Parameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//params += Parameter
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }
		
		//Parameter
		public RuleCall getParamsParameterParserRuleCall_2_2_1_0() { return cParamsParameterParserRuleCall_2_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//bindings += VarBinding*
		public Assignment getBindingsAssignment_4() { return cBindingsAssignment_4; }
		
		//VarBinding
		public RuleCall getBindingsVarBindingParserRuleCall_4_0() { return cBindingsVarBindingParserRuleCall_4_0; }
		
		//locations += Location+
		public Assignment getLocationsAssignment_5() { return cLocationsAssignment_5; }
		
		//Location
		public RuleCall getLocationsLocationParserRuleCall_5_0() { return cLocationsLocationParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Parameter:
		//    name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Location");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAnnounceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Location:
		//    Announce | Question | End
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Announce | Question | End
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Announce
		public RuleCall getAnnounceParserRuleCall_0() { return cAnnounceParserRuleCall_0; }
		
		//Question
		public RuleCall getQuestionParserRuleCall_1() { return cQuestionParserRuleCall_1; }
		
		//End
		public RuleCall getEndParserRuleCall_2() { return cEndParserRuleCall_2; }
	}
	public class AnnounceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Announce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnounceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextExpParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Assignment cTargetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetsTargetParserRuleCall_3_0 = (RuleCall)cTargetsAssignment_3.eContents().get(0);
		
		//Announce:
		//    'announce' name=ID (text=Exp)?  targets += Target+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'announce' name=ID (text=Exp)?  targets += Target+
		public Group getGroup() { return cGroup; }
		
		//'announce'
		public Keyword getAnnounceKeyword_0() { return cAnnounceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(text=Exp)?
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//Exp
		public RuleCall getTextExpParserRuleCall_2_0() { return cTextExpParserRuleCall_2_0; }
		
		//targets += Target+
		public Assignment getTargetsAssignment_3() { return cTargetsAssignment_3; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_3_0() { return cTargetsTargetParserRuleCall_3_0; }
	}
	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextExpParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValidateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValidateExpParserRuleCall_4_0 = (RuleCall)cValidateAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBindingAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cBindingVarBindingCrossReference_5_1_0 = (CrossReference)cBindingAssignment_5_1.eContents().get(0);
		private final RuleCall cBindingVarBindingIDTerminalRuleCall_5_1_0_1 = (RuleCall)cBindingVarBindingCrossReference_5_1_0.eContents().get(1);
		private final Assignment cTargetsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTargetsTargetParserRuleCall_6_0 = (RuleCall)cTargetsAssignment_6.eContents().get(0);
		
		//Question:
		//    'question' name=ID (text=Exp)? 'as' validate=Exp ('in' binding=[VarBinding])? targets += Target+
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'question' name=ID (text=Exp)? 'as' validate=Exp ('in' binding=[VarBinding])? targets += Target+
		public Group getGroup() { return cGroup; }
		
		//'question'
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(text=Exp)?
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//Exp
		public RuleCall getTextExpParserRuleCall_2_0() { return cTextExpParserRuleCall_2_0; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//validate=Exp
		public Assignment getValidateAssignment_4() { return cValidateAssignment_4; }
		
		//Exp
		public RuleCall getValidateExpParserRuleCall_4_0() { return cValidateExpParserRuleCall_4_0; }
		
		//('in' binding=[VarBinding])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'in'
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }
		
		//binding=[VarBinding]
		public Assignment getBindingAssignment_5_1() { return cBindingAssignment_5_1; }
		
		//[VarBinding]
		public CrossReference getBindingVarBindingCrossReference_5_1_0() { return cBindingVarBindingCrossReference_5_1_0; }
		
		//ID
		public RuleCall getBindingVarBindingIDTerminalRuleCall_5_1_0_1() { return cBindingVarBindingIDTerminalRuleCall_5_1_0_1; }
		
		//targets += Target+
		public Assignment getTargetsAssignment_6() { return cTargetsAssignment_6; }
		
		//Target
		public RuleCall getTargetsTargetParserRuleCall_6_0() { return cTargetsTargetParserRuleCall_6_0; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextExpParserRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		
		//End:
		//    'end' name=ID (text=Exp)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'end' name=ID (text=Exp)?
		public Group getGroup() { return cGroup; }
		
		//'end'
		public Keyword getEndKeyword_0() { return cEndKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(text=Exp)?
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//Exp
		public RuleCall getTextExpParserRuleCall_2_0() { return cTextExpParserRuleCall_2_0; }
	}
	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Target");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetTargetableCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetTargetableIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetTargetableCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cArgsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cArgsExpParserRuleCall_2_1_0_0 = (RuleCall)cArgsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cArgsExpParserRuleCall_2_1_1_1_0 = (RuleCall)cArgsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConditionExpParserRuleCall_3_1_0 = (RuleCall)cConditionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEndingTargetsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEndingTargetsEndingTargetParserRuleCall_4_1_0 = (RuleCall)cEndingTargetsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Target:
		//    'to' target=[Targetable] ('('( args+=Exp (',' args+=Exp)*)? ')')? ('if' condition=Exp)? ('{' endingTargets += EndingTarget+ '}')?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'to' target=[Targetable] ('('( args+=Exp (',' args+=Exp)*)? ')')? ('if' condition=Exp)? ('{' endingTargets += EndingTarget+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//target=[Targetable]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[Targetable]
		public CrossReference getTargetTargetableCrossReference_1_0() { return cTargetTargetableCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetTargetableIDTerminalRuleCall_1_0_1() { return cTargetTargetableIDTerminalRuleCall_1_0_1; }
		
		//('('( args+=Exp (',' args+=Exp)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//( args+=Exp (',' args+=Exp)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//args+=Exp
		public Assignment getArgsAssignment_2_1_0() { return cArgsAssignment_2_1_0; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_2_1_0_0() { return cArgsExpParserRuleCall_2_1_0_0; }
		
		//(',' args+=Exp)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//args+=Exp
		public Assignment getArgsAssignment_2_1_1_1() { return cArgsAssignment_2_1_1_1; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_2_1_1_1_0() { return cArgsExpParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//('if' condition=Exp)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//condition=Exp
		public Assignment getConditionAssignment_3_1() { return cConditionAssignment_3_1; }
		
		//Exp
		public RuleCall getConditionExpParserRuleCall_3_1_0() { return cConditionExpParserRuleCall_3_1_0; }
		
		//('{' endingTargets += EndingTarget+ '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//endingTargets += EndingTarget+
		public Assignment getEndingTargetsAssignment_4_1() { return cEndingTargetsAssignment_4_1; }
		
		//EndingTarget
		public RuleCall getEndingTargetsEndingTargetParserRuleCall_4_1_0() { return cEndingTargetsEndingTargetParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class TargetableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Targetable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScenarioParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Targetable:
		//    Scenario | Location
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Scenario | Location
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Scenario
		public RuleCall getScenarioParserRuleCall_0() { return cScenarioParserRuleCall_0; }
		
		//Location
		public RuleCall getLocationParserRuleCall_1() { return cLocationParserRuleCall_1; }
	}
	public class EndingTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.EndingTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFromLocationCrossReference_1_0 = (CrossReference)cFromAssignment_1.eContents().get(0);
		private final RuleCall cFromLocationIDTerminalRuleCall_1_0_1 = (RuleCall)cFromLocationCrossReference_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTargetTargetParserRuleCall_2_0 = (RuleCall)cTargetAssignment_2.eContents().get(0);
		
		//EndingTarget:
		//    'on' from=[Location] target=Target
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' from=[Location] target=Target
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//from=[Location]
		public Assignment getFromAssignment_1() { return cFromAssignment_1; }
		
		//[Location]
		public CrossReference getFromLocationCrossReference_1_0() { return cFromLocationCrossReference_1_0; }
		
		//ID
		public RuleCall getFromLocationIDTerminalRuleCall_1_0_1() { return cFromLocationIDTerminalRuleCall_1_0_1; }
		
		//target=Target
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//Target
		public RuleCall getTargetTargetParserRuleCall_2_0() { return cTargetTargetParserRuleCall_2_0; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Exp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsOrNotEqualsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cAndLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cOrLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightEqualsOrNotEqualsParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//// These expressions are based on the grammar from the semester project, with some modifications to implement the concatonation thingies, as well as some refactoring.
		//Exp returns Expression:
		//    EqualsOrNotEquals (({And.left=current} '&&' | {Or.left=current}  '||' ) right=EqualsOrNotEquals)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//EqualsOrNotEquals (({And.left=current} '&&' | {Or.left=current}  '||' ) right=EqualsOrNotEquals)*
		public Group getGroup() { return cGroup; }
		
		//EqualsOrNotEquals
		public RuleCall getEqualsOrNotEqualsParserRuleCall_0() { return cEqualsOrNotEqualsParserRuleCall_0; }
		
		//(({And.left=current} '&&' | {Or.left=current}  '||' ) right=EqualsOrNotEquals)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({And.left=current} '&&' | {Or.left=current}  '||' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{And.left=current} '&&'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0_0_0() { return cAndLeftAction_1_0_0_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0_0_1() { return cAmpersandAmpersandKeyword_1_0_0_1; }
		
		//{Or.left=current}  '||'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0_1_0() { return cOrLeftAction_1_0_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0_1_1() { return cVerticalLineVerticalLineKeyword_1_0_1_1; }
		
		//right=EqualsOrNotEquals
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//EqualsOrNotEquals
		public RuleCall getRightEqualsOrNotEqualsParserRuleCall_1_1_0() { return cRightEqualsOrNotEqualsParserRuleCall_1_1_0; }
	}
	public class EqualsOrNotEqualsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.EqualsOrNotEquals");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCompareParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cEqualsLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cNotEqualsLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightCompareParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//EqualsOrNotEquals returns Expression:
		//    Compare (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=Compare)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Compare (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=Compare)*
		public Group getGroup() { return cGroup; }
		
		//Compare
		public RuleCall getCompareParserRuleCall_0() { return cCompareParserRuleCall_0; }
		
		//(({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=Compare)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Equals.left=current} '==' | {NotEquals.left=current}  '!=' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Equals.left=current} '=='
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0_0_0() { return cEqualsLeftAction_1_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0_1() { return cEqualsSignEqualsSignKeyword_1_0_0_1; }
		
		//{NotEquals.left=current}  '!='
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{NotEquals.left=current}
		public Action getNotEqualsLeftAction_1_0_1_0() { return cNotEqualsLeftAction_1_0_1_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }
		
		//right=Compare
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Compare
		public RuleCall getRightCompareParserRuleCall_1_1_0() { return cRightCompareParserRuleCall_1_1_0; }
	}
	public class CompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Compare");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcatonationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cGreaterLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cLesserLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cGreaterOrEqualsLeftAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cLesserOrEqualsLeftAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightConcatonationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Compare returns Expression:
		//    Concatonation (({Greater.left=current} '>' | {Lesser.left=current} '<' | {GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=Concatonation)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Concatonation (({Greater.left=current} '>' | {Lesser.left=current} '<' | {GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=Concatonation)*
		public Group getGroup() { return cGroup; }
		
		//Concatonation
		public RuleCall getConcatonationParserRuleCall_0() { return cConcatonationParserRuleCall_0; }
		
		//(({Greater.left=current} '>' | {Lesser.left=current} '<' | {GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=Concatonation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Greater.left=current} '>' | {Lesser.left=current} '<' | {GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Greater.left=current} '>'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Greater.left=current}
		public Action getGreaterLeftAction_1_0_0_0() { return cGreaterLeftAction_1_0_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_0_1() { return cGreaterThanSignKeyword_1_0_0_1; }
		
		//{Lesser.left=current} '<'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Lesser.left=current}
		public Action getLesserLeftAction_1_0_1_0() { return cLesserLeftAction_1_0_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_1_1() { return cLessThanSignKeyword_1_0_1_1; }
		
		//{GreaterOrEquals.left=current} '>='
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//{GreaterOrEquals.left=current}
		public Action getGreaterOrEqualsLeftAction_1_0_2_0() { return cGreaterOrEqualsLeftAction_1_0_2_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_2_1() { return cGreaterThanSignEqualsSignKeyword_1_0_2_1; }
		
		//{LesserOrEquals.left=current}  '<='
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//{LesserOrEquals.left=current}
		public Action getLesserOrEqualsLeftAction_1_0_3_0() { return cLesserOrEqualsLeftAction_1_0_3_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_1_0_3_1() { return cLessThanSignEqualsSignKeyword_1_0_3_1; }
		
		//right=Concatonation
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Concatonation
		public RuleCall getRightConcatonationParserRuleCall_1_1_0() { return cRightConcatonationParserRuleCall_1_1_0; }
	}
	public class ConcatonationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Concatonation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionSubtractionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cConcatLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAdditionSubtractionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Concatonation returns Expression:
		//    AdditionSubtraction (({Concat.left=current} '&') right=AdditionSubtraction)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionSubtraction (({Concat.left=current} '&') right=AdditionSubtraction)*
		public Group getGroup() { return cGroup; }
		
		//AdditionSubtraction
		public RuleCall getAdditionSubtractionParserRuleCall_0() { return cAdditionSubtractionParserRuleCall_0; }
		
		//(({Concat.left=current} '&') right=AdditionSubtraction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Concat.left=current} '&')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Concat.left=current}
		public Action getConcatLeftAction_1_0_0() { return cConcatLeftAction_1_0_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_0_1() { return cAmpersandKeyword_1_0_1; }
		
		//right=AdditionSubtraction
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AdditionSubtraction
		public RuleCall getRightAdditionSubtractionParserRuleCall_1_1_0() { return cRightAdditionSubtractionParserRuleCall_1_1_0; }
	}
	public class AdditionSubtractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.AdditionSubtraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationDivisionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditionSubtraction returns Expression:
		//    MultiplicationDivision (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=MultiplicationDivision)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationDivision (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=MultiplicationDivision)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationDivision
		public RuleCall getMultiplicationDivisionParserRuleCall_0() { return cMultiplicationDivisionParserRuleCall_0; }
		
		//(( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=MultiplicationDivision)*
		public Group getGroup_1() { return cGroup_1; }
		
		//( {Plus.left=current} '+' | {Minus.left=current}  '-' )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current}  '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MultiplicationDivision
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicationDivision
		public RuleCall getRightMultiplicationDivisionParserRuleCall_1_1_0() { return cRightMultiplicationDivisionParserRuleCall_1_1_0; }
	}
	public class MultiplicationDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.MultiplicationDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicationDivision returns Expression:
		//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//(({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Mult.left=current} '*' | {Div.left=current}  '/'  )
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Mult.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Mult.left=current}
		public Action getMultLeftAction_1_0_0_0() { return cMultLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Div.left=current}  '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTypeValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cThisAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBooleanTrueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTrueKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cBooleanFalseAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFalseKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStringValueAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cNumberValueAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cVariableUseAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cRefAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cRefBindingCrossReference_6_1_0 = (CrossReference)cRefAssignment_6_1.eContents().get(0);
		private final RuleCall cRefBindingIDTerminalRuleCall_6_1_0_1 = (RuleCall)cRefBindingCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cParenthesisAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cExpAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_7_2_0 = (RuleCall)cExpAssignment_7_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cExternalCallAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cFuncAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cFuncExternalImportCrossReference_8_1_0 = (CrossReference)cFuncAssignment_8_1.eContents().get(0);
		private final RuleCall cFuncExternalImportIDTerminalRuleCall_8_1_0_1 = (RuleCall)cFuncExternalImportCrossReference_8_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cArgsAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cArgsExpParserRuleCall_8_3_0 = (RuleCall)cArgsAssignment_8_3.eContents().get(0);
		private final Group cGroup_8_4 = (Group)cGroup_8.eContents().get(4);
		private final Keyword cCommaKeyword_8_4_0 = (Keyword)cGroup_8_4.eContents().get(0);
		private final Assignment cArgsAssignment_8_4_1 = (Assignment)cGroup_8_4.eContents().get(1);
		private final RuleCall cArgsExpParserRuleCall_8_4_1_0 = (RuleCall)cArgsAssignment_8_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_5 = (Keyword)cGroup_8.eContents().get(5);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cNotAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cExpAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cExpExpParserRuleCall_9_2_0 = (RuleCall)cExpAssignment_9_2.eContents().get(0);
		
		//Primary returns Expression:
		//    {TypeValue} type=Type |
		//    {This} 'this' |
		//    {BooleanTrue} 'true' |
		//    {BooleanFalse} 'false' |
		//    {StringValue} value=STRING |
		//    {NumberValue} value=INT |
		//    {VariableUse} ref=[Binding] |
		//    {Parenthesis} '(' exp=Exp ')' |
		//    {ExternalCall} func = [ExternalImport] '(' args += Exp? (',' args += Exp)* ')' |
		//    {Not} '!' exp=Exp
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{TypeValue} type=Type |
		//{This} 'this' |
		//{BooleanTrue} 'true' |
		//{BooleanFalse} 'false' |
		//{StringValue} value=STRING |
		//{NumberValue} value=INT |
		//{VariableUse} ref=[Binding] |
		//{Parenthesis} '(' exp=Exp ')' |
		//{ExternalCall} func = [ExternalImport] '(' args += Exp? (',' args += Exp)* ')' |
		//{Not} '!' exp=Exp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TypeValue} type=Type
		public Group getGroup_0() { return cGroup_0; }
		
		//{TypeValue}
		public Action getTypeValueAction_0_0() { return cTypeValueAction_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_1_0() { return cTypeTypeParserRuleCall_0_1_0; }
		
		//{This} 'this'
		public Group getGroup_1() { return cGroup_1; }
		
		//{This}
		public Action getThisAction_1_0() { return cThisAction_1_0; }
		
		//'this'
		public Keyword getThisKeyword_1_1() { return cThisKeyword_1_1; }
		
		//{BooleanTrue} 'true'
		public Group getGroup_2() { return cGroup_2; }
		
		//{BooleanTrue}
		public Action getBooleanTrueAction_2_0() { return cBooleanTrueAction_2_0; }
		
		//'true'
		public Keyword getTrueKeyword_2_1() { return cTrueKeyword_2_1; }
		
		//{BooleanFalse} 'false'
		public Group getGroup_3() { return cGroup_3; }
		
		//{BooleanFalse}
		public Action getBooleanFalseAction_3_0() { return cBooleanFalseAction_3_0; }
		
		//'false'
		public Keyword getFalseKeyword_3_1() { return cFalseKeyword_3_1; }
		
		//{StringValue} value=STRING
		public Group getGroup_4() { return cGroup_4; }
		
		//{StringValue}
		public Action getStringValueAction_4_0() { return cStringValueAction_4_0; }
		
		//value=STRING
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_1_0() { return cValueSTRINGTerminalRuleCall_4_1_0; }
		
		//{NumberValue} value=INT
		public Group getGroup_5() { return cGroup_5; }
		
		//{NumberValue}
		public Action getNumberValueAction_5_0() { return cNumberValueAction_5_0; }
		
		//value=INT
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_5_1_0() { return cValueINTTerminalRuleCall_5_1_0; }
		
		//{VariableUse} ref=[Binding]
		public Group getGroup_6() { return cGroup_6; }
		
		//{VariableUse}
		public Action getVariableUseAction_6_0() { return cVariableUseAction_6_0; }
		
		//ref=[Binding]
		public Assignment getRefAssignment_6_1() { return cRefAssignment_6_1; }
		
		//[Binding]
		public CrossReference getRefBindingCrossReference_6_1_0() { return cRefBindingCrossReference_6_1_0; }
		
		//ID
		public RuleCall getRefBindingIDTerminalRuleCall_6_1_0_1() { return cRefBindingIDTerminalRuleCall_6_1_0_1; }
		
		//{Parenthesis} '(' exp=Exp ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{Parenthesis}
		public Action getParenthesisAction_7_0() { return cParenthesisAction_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_7_2() { return cExpAssignment_7_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_7_2_0() { return cExpExpParserRuleCall_7_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
		
		//{ExternalCall} func = [ExternalImport] '(' args += Exp? (',' args += Exp)* ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{ExternalCall}
		public Action getExternalCallAction_8_0() { return cExternalCallAction_8_0; }
		
		//func = [ExternalImport]
		public Assignment getFuncAssignment_8_1() { return cFuncAssignment_8_1; }
		
		//[ExternalImport]
		public CrossReference getFuncExternalImportCrossReference_8_1_0() { return cFuncExternalImportCrossReference_8_1_0; }
		
		//ID
		public RuleCall getFuncExternalImportIDTerminalRuleCall_8_1_0_1() { return cFuncExternalImportIDTerminalRuleCall_8_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//args += Exp?
		public Assignment getArgsAssignment_8_3() { return cArgsAssignment_8_3; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_8_3_0() { return cArgsExpParserRuleCall_8_3_0; }
		
		//(',' args += Exp)*
		public Group getGroup_8_4() { return cGroup_8_4; }
		
		//','
		public Keyword getCommaKeyword_8_4_0() { return cCommaKeyword_8_4_0; }
		
		//args += Exp
		public Assignment getArgsAssignment_8_4_1() { return cArgsAssignment_8_4_1; }
		
		//Exp
		public RuleCall getArgsExpParserRuleCall_8_4_1_0() { return cArgsExpParserRuleCall_8_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_5() { return cRightParenthesisKeyword_8_5; }
		
		//{Not} '!' exp=Exp
		public Group getGroup_9() { return cGroup_9; }
		
		//{Not}
		public Action getNotAction_9_0() { return cNotAction_9_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_9_1() { return cExclamationMarkKeyword_9_1; }
		
		//exp=Exp
		public Assignment getExpAssignment_9_2() { return cExpAssignment_9_2; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_9_2_0() { return cExpExpParserRuleCall_9_2_0; }
	}
	public class VarBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.VarBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//VarBinding:
		//    'var' name=ID ':' type=Type
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' name=ID ':' type=Type
		public Group getGroup() { return cGroup; }
		
		//'var'
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lomzt.mdsd.exam.IF22.Binding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarBindingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Binding:
		//    VarBinding | Parameter
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//VarBinding | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VarBinding
		public RuleCall getVarBindingParserRuleCall_0() { return cVarBindingParserRuleCall_0; }
		
		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}
	
	
	private final StoryElements pStory;
	private final ExternalImportElements pExternalImport;
	private final TypeElements pType;
	private final ScenarioElements pScenario;
	private final ParameterElements pParameter;
	private final LocationElements pLocation;
	private final AnnounceElements pAnnounce;
	private final QuestionElements pQuestion;
	private final EndElements pEnd;
	private final TargetElements pTarget;
	private final TargetableElements pTargetable;
	private final EndingTargetElements pEndingTarget;
	private final ExpElements pExp;
	private final EqualsOrNotEqualsElements pEqualsOrNotEquals;
	private final CompareElements pCompare;
	private final ConcatonationElements pConcatonation;
	private final AdditionSubtractionElements pAdditionSubtraction;
	private final MultiplicationDivisionElements pMultiplicationDivision;
	private final PrimaryElements pPrimary;
	private final VarBindingElements pVarBinding;
	private final BindingElements pBinding;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public IF22GrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStory = new StoryElements();
		this.pExternalImport = new ExternalImportElements();
		this.pType = new TypeElements();
		this.pScenario = new ScenarioElements();
		this.pParameter = new ParameterElements();
		this.pLocation = new LocationElements();
		this.pAnnounce = new AnnounceElements();
		this.pQuestion = new QuestionElements();
		this.pEnd = new EndElements();
		this.pTarget = new TargetElements();
		this.pTargetable = new TargetableElements();
		this.pEndingTarget = new EndingTargetElements();
		this.pExp = new ExpElements();
		this.pEqualsOrNotEquals = new EqualsOrNotEqualsElements();
		this.pCompare = new CompareElements();
		this.pConcatonation = new ConcatonationElements();
		this.pAdditionSubtraction = new AdditionSubtractionElements();
		this.pMultiplicationDivision = new MultiplicationDivisionElements();
		this.pPrimary = new PrimaryElements();
		this.pVarBinding = new VarBindingElements();
		this.pBinding = new BindingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("lomzt.mdsd.exam.IF22".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Story:
	//    'story' name=ID
	//    imports += ExternalImport*
	//    scenarios += Scenario*
	//;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	//ExternalImport:
	//    'function' name=ID '(' params += Type? (',' params += Type)* ')' ':' returnType = Type
	//;
	public ExternalImportElements getExternalImportAccess() {
		return pExternalImport;
	}
	
	public ParserRule getExternalImportRule() {
		return getExternalImportAccess().getRule();
	}
	
	//Type:
	//    {Number} 'number' | {Boolean} 'boolean' | {Text} 'text'
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Scenario:
	//    'scenario' name=ID ('(' params += Parameter (',' params += Parameter)* ')')? '{'
	//    bindings += VarBinding*
	//    locations += Location+
	//    '}'
	//;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}
	
	//Parameter:
	//    name=ID ':' type=Type
	//;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Location:
	//    Announce | Question | End
	//;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//Announce:
	//    'announce' name=ID (text=Exp)?  targets += Target+
	//;
	public AnnounceElements getAnnounceAccess() {
		return pAnnounce;
	}
	
	public ParserRule getAnnounceRule() {
		return getAnnounceAccess().getRule();
	}
	
	//Question:
	//    'question' name=ID (text=Exp)? 'as' validate=Exp ('in' binding=[VarBinding])? targets += Target+
	//;
	public QuestionElements getQuestionAccess() {
		return pQuestion;
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}
	
	//End:
	//    'end' name=ID (text=Exp)?
	//;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//Target:
	//    'to' target=[Targetable] ('('( args+=Exp (',' args+=Exp)*)? ')')? ('if' condition=Exp)? ('{' endingTargets += EndingTarget+ '}')?
	//;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}
	
	//Targetable:
	//    Scenario | Location
	//;
	public TargetableElements getTargetableAccess() {
		return pTargetable;
	}
	
	public ParserRule getTargetableRule() {
		return getTargetableAccess().getRule();
	}
	
	//EndingTarget:
	//    'on' from=[Location] target=Target
	//;
	public EndingTargetElements getEndingTargetAccess() {
		return pEndingTarget;
	}
	
	public ParserRule getEndingTargetRule() {
		return getEndingTargetAccess().getRule();
	}
	
	//// These expressions are based on the grammar from the semester project, with some modifications to implement the concatonation thingies, as well as some refactoring.
	//Exp returns Expression:
	//    EqualsOrNotEquals (({And.left=current} '&&' | {Or.left=current}  '||' ) right=EqualsOrNotEquals)*
	//;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//EqualsOrNotEquals returns Expression:
	//    Compare (({Equals.left=current} '==' | {NotEquals.left=current}  '!=' ) right=Compare)*
	//;
	public EqualsOrNotEqualsElements getEqualsOrNotEqualsAccess() {
		return pEqualsOrNotEquals;
	}
	
	public ParserRule getEqualsOrNotEqualsRule() {
		return getEqualsOrNotEqualsAccess().getRule();
	}
	
	//Compare returns Expression:
	//    Concatonation (({Greater.left=current} '>' | {Lesser.left=current} '<' | {GreaterOrEquals.left=current} '>=' | {LesserOrEquals.left=current}  '<=' ) right=Concatonation)*
	//;
	public CompareElements getCompareAccess() {
		return pCompare;
	}
	
	public ParserRule getCompareRule() {
		return getCompareAccess().getRule();
	}
	
	//Concatonation returns Expression:
	//    AdditionSubtraction (({Concat.left=current} '&') right=AdditionSubtraction)*
	//;
	public ConcatonationElements getConcatonationAccess() {
		return pConcatonation;
	}
	
	public ParserRule getConcatonationRule() {
		return getConcatonationAccess().getRule();
	}
	
	//AdditionSubtraction returns Expression:
	//    MultiplicationDivision (( {Plus.left=current} '+' | {Minus.left=current}  '-' ) right=MultiplicationDivision)*
	//;
	public AdditionSubtractionElements getAdditionSubtractionAccess() {
		return pAdditionSubtraction;
	}
	
	public ParserRule getAdditionSubtractionRule() {
		return getAdditionSubtractionAccess().getRule();
	}
	
	//MultiplicationDivision returns Expression:
	//    Primary (({Mult.left=current} '*' | {Div.left=current}  '/'  ) right=Primary)*
	//;
	public MultiplicationDivisionElements getMultiplicationDivisionAccess() {
		return pMultiplicationDivision;
	}
	
	public ParserRule getMultiplicationDivisionRule() {
		return getMultiplicationDivisionAccess().getRule();
	}
	
	//Primary returns Expression:
	//    {TypeValue} type=Type |
	//    {This} 'this' |
	//    {BooleanTrue} 'true' |
	//    {BooleanFalse} 'false' |
	//    {StringValue} value=STRING |
	//    {NumberValue} value=INT |
	//    {VariableUse} ref=[Binding] |
	//    {Parenthesis} '(' exp=Exp ')' |
	//    {ExternalCall} func = [ExternalImport] '(' args += Exp? (',' args += Exp)* ')' |
	//    {Not} '!' exp=Exp
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//VarBinding:
	//    'var' name=ID ':' type=Type
	//;
	public VarBindingElements getVarBindingAccess() {
		return pVarBinding;
	}
	
	public ParserRule getVarBindingRule() {
		return getVarBindingAccess().getRule();
	}
	
	//Binding:
	//    VarBinding | Parameter
	//;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
