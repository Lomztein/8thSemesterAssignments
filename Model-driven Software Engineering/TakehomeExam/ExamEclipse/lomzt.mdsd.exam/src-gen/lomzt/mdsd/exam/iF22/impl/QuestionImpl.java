/**
 * generated by Xtext 2.26.0
 */
package lomzt.mdsd.exam.iF22.impl;

import java.util.Collection;

import lomzt.mdsd.exam.iF22.Expression;
import lomzt.mdsd.exam.iF22.IF22Package;
import lomzt.mdsd.exam.iF22.Question;
import lomzt.mdsd.exam.iF22.Target;
import lomzt.mdsd.exam.iF22.VarBinding;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Question</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lomzt.mdsd.exam.iF22.impl.QuestionImpl#getValidate <em>Validate</em>}</li>
 *   <li>{@link lomzt.mdsd.exam.iF22.impl.QuestionImpl#getBinding <em>Binding</em>}</li>
 *   <li>{@link lomzt.mdsd.exam.iF22.impl.QuestionImpl#getTargets <em>Targets</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QuestionImpl extends LocationImpl implements Question
{
  /**
   * The cached value of the '{@link #getValidate() <em>Validate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValidate()
   * @generated
   * @ordered
   */
  protected Expression validate;

  /**
   * The cached value of the '{@link #getBinding() <em>Binding</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBinding()
   * @generated
   * @ordered
   */
  protected VarBinding binding;

  /**
   * The cached value of the '{@link #getTargets() <em>Targets</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTargets()
   * @generated
   * @ordered
   */
  protected EList<Target> targets;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QuestionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IF22Package.Literals.QUESTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getValidate()
  {
    return validate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValidate(Expression newValidate, NotificationChain msgs)
  {
    Expression oldValidate = validate;
    validate = newValidate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__VALIDATE, oldValidate, newValidate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setValidate(Expression newValidate)
  {
    if (newValidate != validate)
    {
      NotificationChain msgs = null;
      if (validate != null)
        msgs = ((InternalEObject)validate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__VALIDATE, null, msgs);
      if (newValidate != null)
        msgs = ((InternalEObject)newValidate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IF22Package.QUESTION__VALIDATE, null, msgs);
      msgs = basicSetValidate(newValidate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__VALIDATE, newValidate, newValidate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarBinding getBinding()
  {
    if (binding != null && binding.eIsProxy())
    {
      InternalEObject oldBinding = (InternalEObject)binding;
      binding = (VarBinding)eResolveProxy(oldBinding);
      if (binding != oldBinding)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, IF22Package.QUESTION__BINDING, oldBinding, binding));
      }
    }
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarBinding basicGetBinding()
  {
    return binding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBinding(VarBinding newBinding)
  {
    VarBinding oldBinding = binding;
    binding = newBinding;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IF22Package.QUESTION__BINDING, oldBinding, binding));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Target> getTargets()
  {
    if (targets == null)
    {
      targets = new EObjectContainmentEList<Target>(Target.class, this, IF22Package.QUESTION__TARGETS);
    }
    return targets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__VALIDATE:
        return basicSetValidate(null, msgs);
      case IF22Package.QUESTION__TARGETS:
        return ((InternalEList<?>)getTargets()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__VALIDATE:
        return getValidate();
      case IF22Package.QUESTION__BINDING:
        if (resolve) return getBinding();
        return basicGetBinding();
      case IF22Package.QUESTION__TARGETS:
        return getTargets();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__VALIDATE:
        setValidate((Expression)newValue);
        return;
      case IF22Package.QUESTION__BINDING:
        setBinding((VarBinding)newValue);
        return;
      case IF22Package.QUESTION__TARGETS:
        getTargets().clear();
        getTargets().addAll((Collection<? extends Target>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__VALIDATE:
        setValidate((Expression)null);
        return;
      case IF22Package.QUESTION__BINDING:
        setBinding((VarBinding)null);
        return;
      case IF22Package.QUESTION__TARGETS:
        getTargets().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IF22Package.QUESTION__VALIDATE:
        return validate != null;
      case IF22Package.QUESTION__BINDING:
        return binding != null;
      case IF22Package.QUESTION__TARGETS:
        return targets != null && !targets.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //QuestionImpl
