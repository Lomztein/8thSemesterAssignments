/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.LetBinding
import dk.sdu.mmmi.mdsd.math.MathExp
import dk.sdu.mmmi.mdsd.math.MathNumber
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.VarBinding
import dk.sdu.mmmi.mdsd.math.VariableUse
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import java.io.File
import dk.sdu.mmmi.mdsd.math.ExternalDefinition
import dk.sdu.mmmi.mdsd.math.Expression
import dk.sdu.mmmi.mdsd.math.Parenthesis
import dk.sdu.mmmi.mdsd.math.ExternalCall
import java.util.ArrayList
import java.util.List
import dk.sdu.mmmi.mdsd.math.Binding

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {
	
	static Map<String, Integer> variables;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val className = math.name;
		
		val builder = new StringBuilder();
		generateClass(builder, className, math);
		
		new File("math_expression").mkdirs()
		fsa.generateFile(className + ".java", builder.toString());
	}
	
	def static appendLine (StringBuilder builder, String string) {
		builder.append(string + "\n");
	}
	
	def static void generateClass (StringBuilder builder, String className, MathExp math) {
		builder.appendLine("package math_expression;\nimport java.util.function.IntSupplier;\npublic class " + className + " {\n");
		generateFields(builder, math, 1);
		builder.appendLine("\n\tprivate External external;")
		builder.appendLine("\n\tpublic " + className + "() { }\n")
		builder.appendLine("\n\tpublic " + className + "(External external) {\n\t\tthis.external = external;\n\t}\n")
		val lets = new ArrayList<LetBinding>()
		generateComputeFunction(builder, math, 1);
		generateExternalInterface(builder, math, 1)
		builder.appendLine("}")
	}
	
	def static void generateFields (StringBuilder builder, MathExp math, int indents) {
		for(varBinding: math.variables)
			builder.appendLine(indents.asIndents + "public int " + varBinding.name + ";");
	}
	
	def static void generateLetExpressions (StringBuilder builder, List<LetBinding> lets, int indents) {
		val cur = new ArrayList<LetBinding>(lets);
		for (binding: cur) {
			lets.remove(binding);
		}
		for (binding: cur) {
			generateLetExpression(builder, binding, indents, lets);
		}
	}
	
	def static void generateLetExpression (StringBuilder builder, LetBinding binding, int indents, List<LetBinding> lets) {
		val localBuilder = new StringBuilder();
		
		builder.appendLine(indents.asIndents + "int " + binding.fullyQualifiedName + " = " + binding.binding.generateExpression(builder, indents) + ";");
		localBuilder.appendLine(indents.asIndents + "int " + binding.fullyQualifiedName + "return = " + binding.body.generateExpression(builder, indents) + ";");		
		
		if (lets.size() > 0) {
			generateLetExpressions(builder, lets, indents);
		}
		
		builder.append(localBuilder.toString());
	}
	
	def static void generateComputeFunction (StringBuilder builder, MathExp math, int indents) {
		builder.appendLine(indents.asIndents + "public void compute () {");
		val localBuilder = new StringBuilder();
		for (varBinding: math.variables) {
			generateComputeStatement(localBuilder, varBinding, indents + 1);
		}
		builder.append(localBuilder.toString());
		builder.appendLine(indents.asIndents + "}\n");
	}
	
	def static void generateComputeStatement (StringBuilder builder, VarBinding binding, int indents) {
		builder.appendLine(indents.asIndents + binding.name + " = " + binding.expression.generateExpression(builder, indents) + ";");
	}
	
	def static String generateExpression(Expression exp, StringBuilder builder, int indents) {
		switch exp {
			Plus: exp.left.generateExpression(builder, indents) + " + " + exp.right.generateExpression(builder, indents)
			Minus: exp.left.generateExpression(builder, indents) + " - " + exp.right.generateExpression(builder, indents)
			Mult: exp.left.generateExpression(builder, indents)+ " * " + exp.right.generateExpression(builder, indents)
			Div: exp.left.generateExpression(builder, indents) + " / " + exp.right.generateExpression(builder, indents)
			Parenthesis: "(" + exp.exp.generateExpression(builder, indents) + ")"
			VariableUse: exp.ref.fullyQualifiedName
			MathNumber: exp.value.toString()
			LetBinding: exp.generateLetBinding(builder, indents)
			ExternalCall: exp.generateExternalCall(builder, indents)
		}
	}
	
	def static String generateLetBinding(LetBinding binding, StringBuilder builder, int indents) {
		val prevLine = indents.asIndents + "int " + binding.fullyQualifiedName + " = " + binding.binding.generateExpression(builder, indents) + ";"
		builder.insert(builder.lastNewLine + 1, prevLine + "\n");
		return binding.body.generateExpression(builder, indents);
	}
	
	def static lastNewLine(StringBuilder builder) {
		return builder.lastIndexOf("\n")
	}
	
	def static String generateExternalCall (ExternalCall call, StringBuilder builder, int indents) {
		var index = 0;
		val start = builder.length();
		val localBuilder = new StringBuilder(builder.toString());
		localBuilder.append("this.external." + call.func.name + "(");
		for (arg: call.args) {
			index++;
			localBuilder.append(arg.generateExpression(builder, indents));
			if (index != call.args.size()) {
				localBuilder.append(", ");
			}
		}
		localBuilder.append(")");
		return localBuilder.substring(start);
	}
	
	def static String fullyQualifiedName (Binding binding) {
		var name = binding.name;
		var container = binding.eContainer;
		while (container !== null) {
			if (container instanceof Binding) {
				name += container.name;
			}
			container = container.eContainer;
		}
		return name;
	}
	
	def static void generateExternalInterface(StringBuilder builder, MathExp math, int indents) {
		builder.appendLine(indents.asIndents + "public interface External {\n");
		for (definition: math.externals) {
			generateExternalDefintion(builder, definition, indents + 1);
		}
		builder.appendLine("\n" + indents.asIndents + "}");
	}
	
	static val argNames = "abcdefghijklmnopqrstuvxyz";
	def static void generateExternalDefintion(StringBuilder builder, ExternalDefinition definition, int indents) {
		var index = 0;
		builder.append(indents.asIndents + "public int " + definition.name + "(");
		for (param: definition.params)	{
			val name = argNames.charAt(index++);
			builder.append(param.toString() + " " + name);
			if (index != definition.params.size()) {
				builder.append(", ");
			}
		}
		builder.append(");\n");
	}
	
	def static String asIndents(int num) {
		val builder = new StringBuilder(num * 2);
		for (var i = 0; i < num; i++) {
			builder.append("\t");
		}
		return builder.toString();
	}
}
