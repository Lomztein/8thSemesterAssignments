/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.ExternalCall;
import dk.sdu.mmmi.mdsd.math.ExternalDefinition;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.MathNumberType;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final String className = math.getName();
    final StringBuilder builder = new StringBuilder();
    MathGenerator.generateClass(builder, className, math);
    new File("math_expression").mkdirs();
    fsa.generateFile((className + ".java"), builder.toString());
  }
  
  public static StringBuilder appendLine(final StringBuilder builder, final String string) {
    return builder.append((string + "\n"));
  }
  
  public static void generateClass(final StringBuilder builder, final String className, final MathExp math) {
    MathGenerator.appendLine(builder, (("package math_expression;\nimport java.util.function.IntSupplier;\npublic class " + className) + " {\n"));
    MathGenerator.generateFields(builder, math, 1);
    MathGenerator.appendLine(builder, "\n\tprivate External external;");
    MathGenerator.generateComputeFunction(builder, math, 1);
    MathGenerator.appendLine(builder, (("\n\tpublic " + className) + "(External external) {\n\t\tthis.external = external;\n\t}\n"));
    MathGenerator.generateExternalInterface(builder, math, 1);
    MathGenerator.appendLine(builder, "}");
  }
  
  public static void generateFields(final StringBuilder builder, final MathExp math, final int indents) {
    EList<VarBinding> _variables = math.getVariables();
    for (final VarBinding varBinding : _variables) {
      String _asIndents = MathGenerator.asIndents(indents);
      String _plus = (_asIndents + "public int ");
      String _name = varBinding.getName();
      String _plus_1 = (_plus + _name);
      String _plus_2 = (_plus_1 + ";");
      MathGenerator.appendLine(builder, _plus_2);
    }
  }
  
  public static void generateComputeFunction(final StringBuilder builder, final MathExp math, final int indents) {
    String _asIndents = MathGenerator.asIndents(indents);
    String _plus = (_asIndents + "public void compute () {");
    MathGenerator.appendLine(builder, _plus);
    EList<VarBinding> _variables = math.getVariables();
    for (final VarBinding varBinding : _variables) {
      {
        final ArrayList<LetBinding> letList = new ArrayList<LetBinding>();
        final StringBuilder statementBuilder = new StringBuilder();
        MathGenerator.generateComputeStatement(statementBuilder, varBinding, (indents + 1), letList);
        for (final LetBinding let : letList) {
          MathGenerator.generateLetLambdaFunction(builder, let, (indents + 1));
        }
        builder.append(statementBuilder.toString());
      }
    }
    String _asIndents_1 = MathGenerator.asIndents(indents);
    String _plus_1 = (_asIndents_1 + "}\n");
    MathGenerator.appendLine(builder, _plus_1);
  }
  
  public static void generateLetLambdaFunction(final StringBuilder builder, final LetBinding binding, final int indents) {
    final ArrayList<LetBinding> dummyList = new ArrayList<LetBinding>();
    String _asIndents = MathGenerator.asIndents(indents);
    String _plus = (_asIndents + "IntSupplier let");
    String _name = binding.getName();
    String _plus_1 = (_plus + _name);
    String _plus_2 = (_plus_1 + " = () -> { int ");
    String _name_1 = binding.getName();
    String _plus_3 = (_plus_2 + _name_1);
    String _plus_4 = (_plus_3 + " = ");
    String _generateExpression = MathGenerator.generateExpression(binding.getBinding(), dummyList);
    String _plus_5 = (_plus_4 + _generateExpression);
    String _plus_6 = (_plus_5 + "; return ");
    String _generateExpression_1 = MathGenerator.generateExpression(binding.getBody(), dummyList);
    String _plus_7 = (_plus_6 + _generateExpression_1);
    String _plus_8 = (_plus_7 + ";};");
    MathGenerator.appendLine(builder, _plus_8);
  }
  
  public static void generateComputeStatement(final StringBuilder builder, final VarBinding binding, final int indents, final ArrayList<LetBinding> lets) {
    String _asIndents = MathGenerator.asIndents(indents);
    String _name = binding.getName();
    String _plus = (_asIndents + _name);
    String _plus_1 = (_plus + " = ");
    String _generateExpression = MathGenerator.generateExpression(binding.getExpression(), lets);
    String _plus_2 = (_plus_1 + _generateExpression);
    String _plus_3 = (_plus_2 + ";");
    MathGenerator.appendLine(builder, _plus_3);
  }
  
  public static String generateExpression(final Expression exp, final ArrayList<LetBinding> lets) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      String _generateExpression = MathGenerator.generateExpression(((Plus)exp).getLeft(), lets);
      String _plus = (_generateExpression + " + ");
      String _generateExpression_1 = MathGenerator.generateExpression(((Plus)exp).getRight(), lets);
      _switchResult = (_plus + _generateExpression_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        String _generateExpression = MathGenerator.generateExpression(((Minus)exp).getLeft(), lets);
        String _plus = (_generateExpression + " + ");
        String _generateExpression_1 = MathGenerator.generateExpression(((Minus)exp).getRight(), lets);
        _switchResult = (_plus + _generateExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        String _generateExpression = MathGenerator.generateExpression(((Mult)exp).getLeft(), lets);
        String _plus = (_generateExpression + " + ");
        String _generateExpression_1 = MathGenerator.generateExpression(((Mult)exp).getRight(), lets);
        _switchResult = (_plus + _generateExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        String _generateExpression = MathGenerator.generateExpression(((Div)exp).getLeft(), lets);
        String _plus = (_generateExpression + " + ");
        String _generateExpression_1 = MathGenerator.generateExpression(((Div)exp).getRight(), lets);
        _switchResult = (_plus + _generateExpression_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Parenthesis) {
        _matched=true;
        Expression _exp = ((Parenthesis)exp).getExp();
        String _plus = ("(" + _exp);
        _switchResult = (_plus + ")");
      }
    }
    if (!_matched) {
      if (exp instanceof VariableUse) {
        _matched=true;
        _switchResult = ((VariableUse)exp).getRef().getName();
      }
    }
    if (!_matched) {
      if (exp instanceof MathNumber) {
        _matched=true;
        _switchResult = Integer.valueOf(((MathNumber)exp).getValue()).toString();
      }
    }
    if (!_matched) {
      if (exp instanceof LetBinding) {
        _matched=true;
        _switchResult = MathGenerator.generateLetBinding(((LetBinding)exp), lets);
      }
    }
    if (!_matched) {
      if (exp instanceof ExternalCall) {
        _matched=true;
        _switchResult = MathGenerator.generateExternalCall(((ExternalCall)exp), lets);
      }
    }
    return _switchResult;
  }
  
  public static String generateLetBinding(final LetBinding binding, final ArrayList<LetBinding> lets) {
    boolean _contains = lets.contains(binding);
    boolean _not = (!_contains);
    if (_not) {
      lets.add(binding);
      MathGenerator.generateExpression(binding.getBinding(), lets);
    } else {
      return binding.getName();
    }
    String _name = binding.getName();
    String _plus = ("let" + _name);
    return (_plus + ".getAsInt()");
  }
  
  public static String generateExternalCall(final ExternalCall call, final ArrayList<LetBinding> lets) {
    int index = 0;
    final StringBuilder builder = new StringBuilder();
    String _name = call.getFunc().getName();
    String _plus = ("this.external." + _name);
    String _plus_1 = (_plus + "(");
    builder.append(_plus_1);
    EList<Expression> _args = call.getArgs();
    for (final Expression arg : _args) {
      {
        index++;
        builder.append(MathGenerator.generateExpression(arg, lets));
        int _size = call.getArgs().size();
        boolean _notEquals = (index != _size);
        if (_notEquals) {
          builder.append(", ");
        }
      }
    }
    builder.append(")");
    return builder.toString();
  }
  
  public static void generateExternalInterface(final StringBuilder builder, final MathExp math, final int indents) {
    String _asIndents = MathGenerator.asIndents(indents);
    String _plus = (_asIndents + "interface External {\n");
    MathGenerator.appendLine(builder, _plus);
    EList<ExternalDefinition> _externals = math.getExternals();
    for (final ExternalDefinition definition : _externals) {
      MathGenerator.generateExternalDefintion(builder, definition, (indents + 1));
    }
    String _asIndents_1 = MathGenerator.asIndents(indents);
    String _plus_1 = ("\n" + _asIndents_1);
    String _plus_2 = (_plus_1 + "}");
    MathGenerator.appendLine(builder, _plus_2);
  }
  
  private static final String argNames = "abcdefghijklmnopqrstuvxyz";
  
  public static void generateExternalDefintion(final StringBuilder builder, final ExternalDefinition definition, final int indents) {
    int index = 0;
    String _asIndents = MathGenerator.asIndents(indents);
    String _plus = (_asIndents + "public int ");
    String _name = definition.getName();
    String _plus_1 = (_plus + _name);
    String _plus_2 = (_plus_1 + "(");
    builder.append(_plus_2);
    EList<MathNumberType> _params = definition.getParams();
    for (final MathNumberType param : _params) {
      {
        int _plusPlus = index++;
        final char name = MathGenerator.argNames.charAt(_plusPlus);
        String _string = param.toString();
        String _plus_3 = (_string + " ");
        String _plus_4 = (_plus_3 + Character.valueOf(name));
        builder.append(_plus_4);
        int _size = definition.getParams().size();
        boolean _notEquals = (index != _size);
        if (_notEquals) {
          builder.append(", ");
        }
      }
    }
    builder.append(");\n");
  }
  
  public static String asIndents(final int num) {
    final StringBuilder builder = new StringBuilder((num * 2));
    for (int i = 0; (i < num); i++) {
      builder.append("\t");
    }
    return builder.toString();
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
}
