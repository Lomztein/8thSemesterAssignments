/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Assignment;
import dk.sdu.mmmi.mdsd.math.Exp;
import dk.sdu.mmmi.mdsd.math.In;
import dk.sdu.mmmi.mdsd.math.LetEnd;
import dk.sdu.mmmi.mdsd.math.MathExp;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables = new HashMap<String, Integer>();
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp model = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final Map<String, Integer> result = MathGenerator.compute(model);
    this.displayPanel(result);
  }
  
  public static Map<String, Integer> compute(final MathExp math) {
    final int count = ((Object[])Conversions.unwrapArray(math.getAssignments(), Object.class)).length;
    for (int i = 0; (i < count); i++) {
      {
        final Assignment assignment = math.getAssignments().get(i);
        MathGenerator.variables.put(assignment.getName(), Integer.valueOf(MathGenerator.computeExp(assignment.getExp())));
      }
    }
    return MathGenerator.variables;
  }
  
  public static int computeExp(final Exp exp) {
    throw new Error("Unresolved compilation problems:"
      + "\nThe method or field left is undefined for the type Exp"
      + "\nThe method or field operator is undefined for the type Exp"
      + "\nThe method or field right is undefined for the type Exp"
      + "\nThe method or field right is undefined for the type Exp"
      + "\nThe method or field right is undefined for the type Exp"
      + "\nThe method or field right is undefined for the type Exp"
      + "\ncomputePrim cannot be resolved"
      + "\n+ cannot be resolved"
      + "\ncomputeExp cannot be resolved"
      + "\n- cannot be resolved"
      + "\ncomputeExp cannot be resolved"
      + "\n* cannot be resolved"
      + "\ncomputeExp cannot be resolved"
      + "\n/ cannot be resolved"
      + "\ncomputeExp cannot be resolved");
  }
  
  public static int computePrim(final /* Primary */Object prim) {
    throw new Error("Unresolved compilation problems:"
      + "\nLitteral cannot be resolved to a type."
      + "\nUnreachable code: The case can never match. It is already handled by a previous condition."
      + "\nUnreachable code: The case can never match. It is already handled by a previous condition."
      + "\nvalue cannot be resolved"
      + "\ncomputeVariableUse cannot be resolved"
      + "\ncomputeParenthesis cannot be resolved");
  }
  
  public static int computeVariableUse(final VariableUse use) {
    return (MathGenerator.variables.get(use.getRef().getName())).intValue();
  }
  
  public static int computeParenthesis(final Parenthesis par) {
    return MathGenerator.computeExp(par.getExp());
  }
  
  public static int computeLetEnd(final LetEnd le) {
    return 0;
  }
  
  public static int computeIn(final In in) {
    return 0;
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
}
